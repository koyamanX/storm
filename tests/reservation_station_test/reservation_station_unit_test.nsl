#include "../../src/core/reservation_station.nsl"

#define INIT_UNITTEST() \
	reg clkcnt[32] = 0; \
	reg reset = 0; \
	func_self Unittest(); \
	if(reset == 0) {reset := 1; Unittest();}
#define CLOCK(clk, nsl_block) {clkcnt := clk; nsl_block;}
#define ASSERT_EQ(actual, expected) if(actual != expected) _finish("Unittest failed at clock%d, LINE(%d): %x is expected, but got %x\n", clkcnt+1, __LINE__, expected, actual)

declare reservation_station_unit_test simulation {

}

module reservation_station_unit_test {
	reservation_station rs;
	INIT_UNITTEST();

	func Unittest seq {
		CLOCK(0, {})
		CLOCK(1, {
			rs.issue(1, 1, 1, 1, 1, 1, 1, 1,
					1, 1, 1, 1, 1, 1, 1, 1);
			ASSERT_EQ(rs.rs_tag, 0);
		})
		CLOCK(2, {
			rs.issue(1, 2, 2, 2, 2, 2, 2, 2, 
					1, 2, 2, 2, 2, 2, 2, 2);
			ASSERT_EQ(rs.rs_tag, 2);
		})
		CLOCK(3, {
			rs.issue(1, 3, 3, 3, 3, 3, 3, 3, 
					1, 3, 3, 3, 3, 3, 3, 3);
			ASSERT_EQ(rs.rs_tag, 4);
		})
		CLOCK(4, {
			rs.issue(1, 4, 4, 4, 4, 4, 4, 4, 
					1, 4, 4, 4, 4, 4, 4, 4);
			ASSERT_EQ(rs.rs_tag, 6);
		})
		CLOCK(5, {});
		CLOCK(6, {
			ASSERT_EQ(rs.full, 1);
		})
		CLOCK(7, {
			rs.CDB0(1, 0xffffffff);
		})
		CLOCK(8, {
			ASSERT_EQ(rs.dispatch0, 1);
			ASSERT_EQ(rs.dispatch1, 1);
		})
		CLOCK(9, {})
		CLOCK(10, {})
		CLOCK(11, {})
		CLOCK(12, {})
		CLOCK(13, {})
		CLOCK(14, {})
		CLOCK(15, {})
		_finish("Unittest passed\n");
	}
}
