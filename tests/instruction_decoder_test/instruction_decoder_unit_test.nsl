#include "instruction_decoder.h"

declare instruction_decoder_unit_test simulation {
	input inst[32];
	func_in decode(inst);
	output rd[5];
	output rs1[5];
	output rs2[5];
	output funct3[3];
	output funct7[7];
	output funct12[12];
	output beq;
	output bne;
	output blt;
	output bltu;
	output bge;
	output bgeu;
	output imm[32];
	output fn[4];

	func_out load();
	func_out store();
	func_out branch();
	func_out jalr();
	func_out misc_mem();
	func_out amo();
	func_out jal();
	func_out op_imm();
	func_out op(rd, rs1, rs2, fn);
	func_out system();
	func_out auipc();
	func_out lui();
	func_out illegal_instruction();
}

module instruction_decoder_unit_test {
	instruction_decoder inst_dec;

	func decode {
		inst_dec.decode(inst);
	}
	func inst_dec.load {
		load();
	}
	func inst_dec.store {
		store();
	}
	func inst_dec.branch {
		branch();
	}
	func inst_dec.jalr {
		jalr();
	}
	func inst_dec.misc_mem {
		misc_mem();
	}
	func inst_dec.amo {
		amo();
	}
	func inst_dec.jal {
		jal();
	}
	func inst_dec.op_imm {
		op_imm();
	}
	func inst_dec.op {
		op(inst_dec.rd, inst_dec.rs1, inst_dec.rs2, inst_dec.fn);
	}
	func inst_dec.system {
		system();
	}
	func inst_dec.auipc {
		auipc();
	}
	func inst_dec.lui {
		lui();
	}
	func inst_dec.illegal_instruction {
		illegal_instruction();
	}
}
