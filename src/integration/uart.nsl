#include "uart.h"
#include "wishbone_slave.h"
#include "wishbone_common.h"

declare uart_fifo_8x8 {
	input req_push_data[8];
	func_in req_push(req_push_data);	
	output rsp_pop_data[8];
	func_in req_pop(): rsp_pop_data;
	output full_o;
	output empty_o;
	output count_o[4];
}

module uart_fifo_8x8 {
    mem ram[8][8];
	reg rptr[4] = 0;
	reg wptr[4] = 0;
	reg count[4] = 0;
	wire next_rptr[4];
	wire next_wptr[4];
	func_self full();
	func_self empty();

	full_o = full;
	empty_o = empty;
	count_o = count; 

	func req_push {
		wptr := next_wptr;
		ram[wptr] := req_push_data;
	}
	func req_pop {
		rptr := next_rptr;
		return ram[rptr];
	}
    next_rptr = rptr + 1'b1;
    next_wptr = wptr + 1'b1;

    if((wptr[2:0] == rptr[2:0]) && (wptr[3] != rptr[3])) {
        full();
	}
    if(rptr == wptr) {
        empty();
    }
	count := count + req_push - req_pop;
}

module uart {
    wishbone_slave wb_slave_if;
	proc_name tx_idle, tx_start_bit, tx_data_bit, tx_stop_bit;
	proc_name rx_idle, rx_start_bit, rx_data_bit, rx_stop_bit;
	uart_fifo_8x8 tx_fifo;
	uart_fifo_8x8 rx_fifo;
	txctrl_t reg txctrl = 0;
	rxctrl_t reg rxctrl = 0;
	ie_t reg ie = 0;
	ip_t reg ip = 0;
	baud_t reg div = 0;
	reg tx_data_bit_buf[8];
	func_self txwm_interrupt();
	func_self rxwm_interrupt();
	reg txd = 1;
	reg rxd = 1;

	func reset {
		wb_slave_if.reset();
		tx_idle.invoke();
		rx_idle.invoke();
	}
    func wb_slave_if.req_read {
		any {
			wb_slave_if.req_addr == UART_BASE+TXDATA: wb_slave_if.rsp_valid({32'(1'b0), tx_fifo.full_o, 31'(1'b0)});
			wb_slave_if.req_addr == UART_BASE+RXDATA && !rx_fifo.empty_o: wb_slave_if.rsp_valid(rx_fifo.empty_o<<31 | rx_fifo.req_pop());
			wb_slave_if.req_addr == UART_BASE+RXDATA && rx_fifo.empty_o: wb_slave_if.rsp_valid(rx_fifo.empty_o<<31);
			wb_slave_if.req_addr == UART_BASE+TXCTRL: wb_slave_if.rsp_valid(txctrl);
			wb_slave_if.req_addr == UART_BASE+RXCTRL: wb_slave_if.rsp_valid(rxctrl);
			wb_slave_if.req_addr == UART_BASE+IE: wb_slave_if.rsp_valid(ie);
			wb_slave_if.req_addr == UART_BASE+IP: wb_slave_if.rsp_valid(rxwm_interrupt<<1 | txwm_interrupt);
			wb_slave_if.req_addr == UART_BASE+DIV: wb_slave_if.rsp_valid(div);
		}
	}
    func wb_slave_if.req_write {
		any {
			wb_slave_if.req_addr == UART_BASE+TXDATA: tx_fifo.req_push(wb_slave_if.req_data[7:0]);
			wb_slave_if.req_addr == UART_BASE+TXCTRL: txctrl := wb_slave_if.req_data[31:0];
			wb_slave_if.req_addr == UART_BASE+RXCTRL: rxctrl := wb_slave_if.req_data[31:0];
			wb_slave_if.req_addr == UART_BASE+IE: ie := wb_slave_if.req_data[31:0];
			wb_slave_if.req_addr == UART_BASE+IP: ip := wb_slave_if.req_data[31:0];
			wb_slave_if.req_addr == UART_BASE+DIV: div := wb_slave_if.req_data[31:0];
		}
        wb_slave_if.rsp_valid(64'b0);
	}
	proc tx_idle {
		if(!tx_fifo.empty_o && txctrl.txen) {
			tx_start_bit();
		}
	}
	proc tx_start_bit {
		tx_data_bit_buf := tx_fifo.req_pop();
		tx_data_bit();
	}
	proc tx_data_bit {
		_write("%c", tx_data_bit_buf);	
		tx_stop_bit();
	}
	proc tx_stop_bit {
		tx_idle();
	}
	proc rx_idle {
	}
	proc rx_start_bit {
	}
	proc rx_data_bit {
	}
	proc rx_stop_bit {
	}
	if(tx_fifo.count_o >= txctrl.txcnt && ie.txwm) {
		txwm_interrupt();
	}
	if(rx_fifo.count_o >= rxctrl.rxcnt && ie.rxwm) {
		rxwm_interrupt();
	}
	func txwm_interrupt {
		req_txwm_interrupt();
	}
	func rxwm_interrupt {
		req_rxwm_interrupt();
	}
    WISHBONE_SLAVE_IF(wb_slave_if);
}
