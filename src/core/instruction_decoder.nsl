#include "instruction_decoder.h"
#include "inst.h"
#include "opcode_map.h"
#include "imm_gen.h"
#include "alu32.h"

module instruction_decoder {
	func_self decode_inst0();
	func_self decode_inst1();
	imm_gen imm_gen0;
	imm_gen imm_gen1;

	func decode {
		decode_inst0();
		decode_inst1();
	}
	func decode_inst0 {
		wire inst0_opcode[7];
		wire inst0_alu_fn[4];
		r_type_t wire inst0_rtype;
		i_type_t wire inst0_itype;

		inst0_opcode = inst0[6:0];
		inst0_rtype = inst0;
		inst0_itype = inst0;
		any {
			inst0_opcode == OP: {
				inst0_alu_fn = {inst0_rtype.funct7[5], inst0_rtype.funct3};
				uops0_alu(inst0_alu_fn, inst0_rtype.rd, 1'b1, inst0_rtype.rs1, 1'b1, inst0_rtype.rs2, 0);
			}
			inst0_opcode == OP_IMM: {
				imm_gen0.i_type(inst0);
				if((inst0_itype.funct3 == ALU_SLL) || (inst0_itype.funct3 == ALU_SRA) || (inst0_itype.funct3 == ALU_SRL)) {
					/* use rtype field for funct7 */
					inst0_alu_fn = {inst0_rtype.funct7[5], inst0_itype.funct3};
				} else {
					inst0_alu_fn = {1'b0, inst0_itype.funct3};
				}
				uops0_alu(inst0_alu_fn, inst0_itype.rd, 1'b1, inst0_itype.rs1, 1'b0, 0, imm_gen0.imm);
			}
		}
	}
	func decode_inst1 {
		wire inst1_opcode[7];
		wire inst1_alu_fn[4];
		r_type_t wire inst1_rtype;
		i_type_t wire inst1_itype;

		inst1_opcode = inst1[6:0];
		inst1_rtype = inst1;
		inst1_itype = inst1;
		any {
			inst1_opcode == OP: {
				inst1_alu_fn = {inst1_rtype.funct7[5], inst1_rtype.funct3};
				uops1_alu(inst1_alu_fn, inst1_rtype.rd, 1'b1, inst1_rtype.rs1, 1'b1, inst1_rtype.rs2, 0);
			}
			inst1_opcode == OP_IMM: {
				imm_gen1.i_type(inst1);
				if((inst1_itype.funct3 == ALU_SLL) || (inst1_itype.funct3 == ALU_SRA) || (inst1_itype.funct3 == ALU_SRL)) {
					/* use rtype field for funct7 */
					inst1_alu_fn = {inst1_rtype.funct7[5], inst1_itype.funct3};
				} else {
					inst1_alu_fn = {1'b0, inst1_itype.funct3};
				}
				uops1_alu(inst1_alu_fn, inst1_itype.rd, 1'b1, inst1_itype.rs1, 1'b0, 0, imm_gen1.imm);
			}
		}
	}
}
