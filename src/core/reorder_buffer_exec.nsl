#include "reorder_buffer.h"
#include "reorder_buffer_exec.h"
module reorder_buffer_exec {
    mem bank_w0_r0[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w0_r1[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w0_r2[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w0_r3[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w0_r4[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w1_r0[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w1_r1[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w1_r2[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w1_r3[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w1_r4[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w2_r0[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w2_r1[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w2_r2[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w2_r3[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w2_r4[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w3_r0[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w3_r1[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w3_r2[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w3_r3[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w3_r4[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w4_r0[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w4_r1[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w4_r2[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w4_r3[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem bank_w4_r4[NUMBER_OF_ROB][SIZEOF_REORDER_BUFFER_EXEC_T];
    mem lvt[NUMBER_OF_ROB][3] = {0};

    func read_operandA {
        any {
            lvt[read_operandA_addr] == 0: return bank_w0_r0[read_operandA_addr];
            lvt[read_operandA_addr] == 1: return bank_w1_r0[read_operandA_addr];
            lvt[read_operandA_addr] == 2: return bank_w2_r0[read_operandA_addr];
            lvt[read_operandA_addr] == 3: return bank_w3_r0[read_operandA_addr];
            lvt[read_operandA_addr] == 4: return bank_w4_r0[read_operandA_addr];
        }
    }
    func read_operandB {
        any {
            lvt[read_operandB_addr] == 0: return bank_w0_r1[read_operandB_addr];
            lvt[read_operandB_addr] == 1: return bank_w1_r1[read_operandB_addr];
            lvt[read_operandB_addr] == 2: return bank_w2_r1[read_operandB_addr];
            lvt[read_operandB_addr] == 3: return bank_w3_r1[read_operandB_addr];
            lvt[read_operandB_addr] == 4: return bank_w4_r1[read_operandB_addr];
        }
    }
    func read_operandC {
        any {
            lvt[read_operandC_addr] == 0: return bank_w0_r2[read_operandC_addr];
            lvt[read_operandC_addr] == 1: return bank_w1_r2[read_operandC_addr];
            lvt[read_operandC_addr] == 2: return bank_w2_r2[read_operandC_addr];
            lvt[read_operandC_addr] == 3: return bank_w3_r2[read_operandC_addr];
            lvt[read_operandC_addr] == 4: return bank_w4_r2[read_operandC_addr];
        }
    }
    func read_operandD {
        any {
            lvt[read_operandD_addr] == 0: return bank_w0_r3[read_operandD_addr];
            lvt[read_operandD_addr] == 1: return bank_w1_r3[read_operandD_addr];
            lvt[read_operandD_addr] == 2: return bank_w2_r3[read_operandD_addr];
            lvt[read_operandD_addr] == 3: return bank_w3_r3[read_operandD_addr];
            lvt[read_operandD_addr] == 4: return bank_w4_r3[read_operandD_addr];
        }
    }
    func commit {
        any {
            lvt[commit_addr] == 0: return bank_w0_r4[commit_addr];
            lvt[commit_addr] == 1: return bank_w1_r4[commit_addr];
            lvt[commit_addr] == 2: return bank_w2_r4[commit_addr];
            lvt[commit_addr] == 3: return bank_w3_r4[commit_addr];
            lvt[commit_addr] == 4: return bank_w4_r4[commit_addr];
        }
    }
    func CDB0 {
        bank_w0_r0[CDB0_addr] := CDB0_data;
        bank_w0_r1[CDB0_addr] := CDB0_data;
        bank_w0_r2[CDB0_addr] := CDB0_data;
        bank_w0_r3[CDB0_addr] := CDB0_data;
        bank_w0_r4[CDB0_addr] := CDB0_data;
        lvt[CDB0_addr] := 0;
    }
    func CDB1 {
        bank_w1_r0[CDB1_addr] := CDB1_data;
        bank_w1_r1[CDB1_addr] := CDB1_data;
        bank_w1_r2[CDB1_addr] := CDB1_data;
        bank_w1_r3[CDB1_addr] := CDB1_data;
        bank_w1_r4[CDB1_addr] := CDB1_data;
        lvt[CDB1_addr] := 1;
    }
    func CDB2 {
        bank_w2_r0[CDB2_addr] := CDB2_data;
        bank_w2_r1[CDB2_addr] := CDB2_data;
        bank_w2_r2[CDB2_addr] := CDB2_data;
        bank_w2_r3[CDB2_addr] := CDB2_data;
        bank_w2_r4[CDB2_addr] := CDB2_data;
        lvt[CDB2_addr] := 2;
    }
    func CDB3 {
        bank_w3_r0[CDB3_addr] := CDB3_data;
        bank_w3_r1[CDB3_addr] := CDB3_data;
        bank_w3_r2[CDB3_addr] := CDB3_data;
        bank_w3_r3[CDB3_addr] := CDB3_data;
        bank_w3_r4[CDB3_addr] := CDB3_data;
        lvt[CDB3_addr] := 3;
    }
    func issue {
        bank_w4_r0[issue_addr] := issue_data;
        bank_w4_r1[issue_addr] := issue_data;
        bank_w4_r2[issue_addr] := issue_data;
        bank_w4_r3[issue_addr] := issue_data;
        bank_w4_r4[issue_addr] := issue_data;
        lvt[issue_addr] := 4;
    }
}
