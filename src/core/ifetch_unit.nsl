#include "ifetch_unit.h"
#include "inst_buffer.h"
#include "icache.h"
#include "wishbone_master.h"
#include "wishbone_common.h"
#include "riscv.h"
#include "opcode_map.h"
#include "branch_predictor.h"

#define ALIGN8(s32) {s32[31:3], 3'b000}

module ifetch_unit {
    reg st0_vpc[XLEN];
    proc_name st0(st0_vpc);
    func_self tlb_hit;
    wire va[XLEN];
    wire pa[XLEN];
    func_self v2p(va) : pa;
    reg st1_vpc[XLEN];
    reg st1_ppc[XLEN];
    proc_name st1(st1_vpc, st1_ppc);
    reg st2_vpc[XLEN];
    reg st2_ppc[XLEN];
    reg st2_fetch_packet[64];
    proc_name st2(st2_vpc, st2_ppc, st2_fetch_packet);
    icache ic;
    wishbone_master wb_master_if;
    inst_buffer ibuf;
	branch_predictor bp;

    func_self flush_st0();
    func_self flush_st1();
    func_self flush_st2();
    func_self flush();
    func_self stall_st0();
    func_self stall_st1();
    func_self stall_st2();
    func_self stall();
    reg stall_ifetch_vpc[XLEN];
    proc_name stall_ifetch(stall_ifetch_vpc);
	proc_name invalidate_all();

    func reset {
        ic.reset();
    }
    func redirect {
        flush();
        st0(newpc);
    }
    func flush_st0 {
        st0.finish();
    }
    func flush_st1 {
        st1.finish();
    }
    func flush_st2 {
        st2.finish();
    }
	func req_invalidate_all {
		flush();
		invalidate_all();
	}
	proc invalidate_all {
		ic.req_invalidate_all();
		if(ic.rsp_invalidate_all_done) {
			rsp_invalidate_all_done();
			finish();
		}
	}
    func flush {
        stall();
        flush_st0();
        flush_st1();
        flush_st2();
		bp.req_flush();
        stall_ifetch.finish();
        ibuf.req_flush();
    }
    func stall {
        stall_st0();
        stall_st1();
        stall_st2();
    }
    if(ibuf.full_o) {
        ibuf_full();
    }
    if(ibuf.empty_o) {
        ibuf_empty();
    }
    func ibuf_flush {
        ibuf.req_flush();
    }
    func ibuf_pop {
        return ibuf.req_pop();
    }
    if(ibuf.full_o && !redirect) {
        st0.finish();
        st1.finish();
        st2.finish();
        stall();

        alt {
            st2: stall_ifetch(st2_vpc);
            st1: stall_ifetch(st1_vpc);
            st0: stall_ifetch(st0_vpc);
        }
    }
    if(stall_ifetch && !ibuf.full_o && !redirect && !invalidate_all) {
        stall_ifetch.finish();
        st0(stall_ifetch_vpc);
    }
    proc st0 {
        wire st0_new_pc[XLEN];

        v2p(ALIGN8(st0_vpc));
        if(tlb_hit && !flush_st0 && !stall_st0) {
            st0(st0_new_pc);
            st1(st0_vpc, pa);
        }
        any {
            st0_vpc[2]: st0_new_pc = st0_vpc + 4;
            ~st0_vpc[2]: st0_new_pc = st0_vpc + 8;
        }
    }
    func v2p {
        tlb_hit();
        return va;
    }
    proc st1 {
        ic.req_cache_read(ALIGN8(st1_ppc));
        if(ic.rsp_cache_hit && !flush_st1 && !stall_st1) {
            st2(st1_vpc, st1_ppc, ic.rsp_cache_data);
        } else {
            stall_st0();
        }
    }
    proc st2 {
		wire st2_inst0[32];
		wire st2_inst1[32];

        if(!flush_st2 && !stall_st2) {
			st2_inst0 = st2_fetch_packet[31:0];
			st2_inst1 = st2_fetch_packet[63:32];

			any {
				st2_vpc[2]: {
					if(st2_inst1[6:0] == BRANCH) {
						bp.req_predict1(st2_vpc+4);
					}
					if(bp.rsp_predict1_pred) {
						stall_st0();
						stall_st1();
						flush_st0();
						flush_st1();
						stall_ifetch.finish();
						st0(bp.rsp_predict1_target);
					}
					ibuf.req_push({(st2_vpc)[XLEN-1:0], {st2_inst1, 32'(1'b0)}, {bp.rsp_predict1_pred, 1'b0}, 2'b10});
				}
				~st2_vpc[2]: {
					if(st2_inst0[6:0] == BRANCH) {
						bp.req_predict0(st2_vpc);
					}
					if(st2_inst1[6:0] == BRANCH) {
						bp.req_predict1(st2_vpc+4);
					}
					alt {
						bp.rsp_predict0_pred: {
							stall_st0();
							stall_st1();
							flush_st0();
							flush_st1();
							stall_ifetch.finish();
							st0(bp.rsp_predict0_target);
							ibuf.req_push({(st2_vpc)[XLEN-1:0], {st2_inst0, 32'(1'b0)}, 2'b10, 2'b10});
						}
						bp.rsp_predict1_pred: {
							stall_st0();
							stall_st1();
							flush_st0();
							flush_st1();
							stall_ifetch.finish();
							st0(bp.rsp_predict1_target);
							ibuf.req_push({(st2_vpc)[XLEN-1:0], {st2_inst0, st2_inst1}, 2'b01, 2'b11});
						}
						else: {
							ibuf.req_push({(st2_vpc)[XLEN-1:0], {st2_inst0, st2_inst1}, 2'b00, 2'b11});
					    }
					}
				}
			}
            finish();
        }
    }
    func ic.req_read {
        wb_master_if.req_read(ic.req_addr, ic.req_sel);
    }
    func ic.req_write {
        wb_master_if.req_write(ic.req_addr, ic.req_sel, ic.req_data);
    }
    func ic.req_read_modify_write {
        wb_master_if.req_read_modify_write(ic.req_addr, ic.req_sel, ic.req_data);
    }
    func wb_master_if.req_stall {
        ic.req_stall();
    }
    func wb_master_if.rsp_valid {
        ic.rsp_valid(wb_master_if.rsp_data);
    }
    func wb_master_if.rsp_error {
        ic.rsp_error();
    }
    func wb_master_if.rsp_retry {
        ic.rsp_retry();
    }
    func wb_master_if.rsp_stall {
        ic.rsp_stall();
    }
	func req_update_predict0 {
		bp.req_update_predict0(req_update_predict0_pc, req_update_predict0_target);
	}
	func req_update_predict1 {
		bp.req_update_predict1(req_update_predict1_pc, req_update_predict1_target);
	}

    WISHBONE_MASTER_IF(wb_master_if);
}
