#include "ifetch_unit.h"
#include "icache.h"
#include "wishbone_master.h"
#include "wishbone_common.h"

#define ALIGN8(s32) {s32[31:3], 3'b000}

module ifetch_unit {
	reg st0_vpc[32];
	proc_name st0(st0_vpc);
	func_self tlb_hit;
	wire va[32];
	wire pa[32];
	func_self v2p(va) : pa;
	reg st1_vpc[32];
	reg st1_ppc[32];
	proc_name st1(st1_vpc, st1_ppc);
	reg st2_vpc[32];
	reg st2_ppc[32];
	reg st2_fetch_packet[64];
	proc_name st2(st2_vpc, st2_ppc, st2_fetch_packet);
	func_self predict();
	func_self predict_taken();
	func_self predict_not_taken();
	icache ic;
	wishbone_master wb_master_if;

	func_self flush_st0();
	func_self flush_st1();
	func_self flush_st2();
	func_self flush();

	func reset {
		ic.reset();
	}
	func redirect {
		flush();
		st0(newpc);
	}
	func flush {
		flush_st0();
		flush_st1();
		flush_st2();
		st0.finish();
		st1.finish();
		st2.finish();
	}

	proc st0 {
		v2p(ALIGN8(st0_vpc));
		ic.req_cache_read(ALIGN8(st0_vpc));
		if(tlb_hit && !flush_st0) {
			st1(st0_vpc, pa);
		}
	}
	func v2p {
		tlb_hit();
		return va;
	}
	proc st1 {
		ic.req_cache_pa_valid(ALIGN8(st1_ppc));
		if(ic.rsp_cache_hit && !flush_st1) {
			st2(st1_vpc, st1_ppc, ic.rsp_cache_data);
		} else {
			st0(st1_vpc);
		}
	}
	proc st2 {
		wire st2_newpc[32];

		predict();
		if(predict_not_taken && !flush_st2) {
			st0(st2_newpc);
		}

		any {
			st2_vpc[2]: {
				st2_newpc = st2_vpc + 4;
				push2({(st2_vpc)[31:0], (st2_vpc+4)[31:0], {st2_fetch_packet[31:0], st2_fetch_packet[63:32]}, 2'b00, 2'b10});
			}
			~st2_vpc[2]: {
				st2_newpc = st2_vpc + 8;
				push2({(st2_vpc)[31:0], (st2_vpc+4)[31:0], st2_fetch_packet[63:0], 2'b00, 2'b11});
			}
		}
	}
	func predict {
		predict_not_taken();
	}

	func ic.req_read {
		wb_master_if.req_read(ic.req_addr, ic.req_sel);
	}
	func ic.req_write {
		wb_master_if.req_write(ic.req_addr, ic.req_sel, ic.req_data);
	}
	func ic.req_read_modify_write {
		wb_master_if.req_read_modify_write(ic.req_addr, ic.req_sel, ic.req_data);
	}
	func wb_master_if.req_stall {
		ic.req_stall();
	}
	func wb_master_if.rsp_valid {
		ic.rsp_valid(wb_master_if.rsp_data);
	}
	func wb_master_if.rsp_error {
		ic.rsp_error();
	}
	func wb_master_if.rsp_retry {
		ic.rsp_retry();
	}
	func wb_master_if.rsp_stall {
		ic.rsp_stall();
	}

	WISHBONE_MASTER_IF(wb_master_if);
}
