#include "inst_buffer.h"

module inst_buffer {
    mem ibuf[NUMBER_OF_INST_BUFFER][SIZEOF_FETCH_PACKET_T] = {0};
    reg rptr[LOG2_INST_BUFFER_NUM_OF_ENTRIES+1] = 0;
    reg wptr[LOG2_INST_BUFFER_NUM_OF_ENTRIES+1] = 0;
    wire next_rptr[LOG2_INST_BUFFER_NUM_OF_ENTRIES+1];
    wire next_wptr[LOG2_INST_BUFFER_NUM_OF_ENTRIES+1];
    func_self full();
    func_self empty();

    func req_push {
        if(~full && ~req_flush) {
            ibuf[wptr] := req_push_data;
            wptr := next_wptr;
        }
    }
    func req_pop {
        if(~empty && ~req_flush) {
            rptr := next_rptr;
            return ibuf[rptr];
        }
    }
    func req_flush {
        rptr := 0;
        wptr := 0;
    }
    next_rptr = rptr + 1'b1;
    next_wptr = wptr + 1'b1;

    if((wptr[LOG2_INST_BUFFER_NUM_OF_ENTRIES-1:0] == rptr[LOG2_INST_BUFFER_NUM_OF_ENTRIES-1:0])
        && (wptr[LOG2_INST_BUFFER_NUM_OF_ENTRIES] != rptr[LOG2_INST_BUFFER_NUM_OF_ENTRIES])) {
        full();
    }
    if(rptr == wptr) {
        empty();
    }
	full_o = full;
	empty_o = empty;
}
