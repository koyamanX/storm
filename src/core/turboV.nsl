#include "turboV.h"
#include "ifetch_unit.h"
#include "alu32.h"
#include "wishbone_common.h"
#include "reorder_buffer.h"
#include "uop_decoder.h"
#include "reservation_station.h"
#include "reservation_station_in_order.h"
#include "register_file.h"
#include "opcode_map.h"
#include "bru32.h"
#include "load_store_unit.h"
#include "control_status_register.h"
#include "priv.h"
#include "uops.h"

#ifdef ENABLE_DEBUG
#define DEBUG_COMMIT0(pc, inst, cause) debug_commit0(pc, inst, cause)
#define DEBUG_COMMIT1(pc, inst, cause) debug_commit1(pc, inst, cause)
#else
#define DEBUG_COMMIT0(pc, inst, cause)
#define DEBUG_COMMIT1(pc, inst, cause)
#endif


struct issue_packet_t {
    inst0_valid;
    inst0_pred;
    inst0_pc[XLEN];
    inst0[ILEN];
    inst1_valid;
    inst1_pred;
    inst1_pc[XLEN];
    inst1_npc[XLEN];
    inst1[ILEN];
};

module turboV {
    /* Decode stage */
    proc_name decode();
    func_self stall_issue();
    /* Issue stage */
    issue_packet_t reg issue_packet;
    wire is_issue;
    uop_t reg issue_uop0;
    uop_t reg issue_uop1;
    proc_name issue(issue_packet, issue_uop0, issue_uop1);
    /* Execute stage */
    reg execute_alu0_fn[4];
    reg execute_alu0_dest[ROB_TAG_SIZE];
    reg execute_alu0_a[32];
    reg execute_alu0_b[32];
    reg execute_alu1_fn[4];
    reg execute_alu1_dest[ROB_TAG_SIZE];
    reg execute_alu1_a[32];
    reg execute_alu1_b[32];
    reg execute_bru0_fn[4];
    reg execute_bru0_dest[ROB_TAG_SIZE];
    reg execute_bru0_a[32];
    reg execute_bru0_b[32];
    reg execute_bru0_A[32];
    proc_name execute_alu0(execute_alu0_fn, execute_alu0_dest, execute_alu0_a, execute_alu0_b);
    proc_name execute_alu1(execute_alu1_fn, execute_alu1_dest, execute_alu1_a, execute_alu1_b);
    proc_name execute_bru0(execute_bru0_fn, execute_bru0_dest, execute_bru0_a, execute_bru0_b, execute_bru0_A);
    /* Write Result stage */
    reg writeresult_alu0_dest[ROB_TAG_SIZE];
    reg writeresult_alu0_val[32];
    reg writeresult_alu1_dest[ROB_TAG_SIZE];
    reg writeresult_alu1_val[32];
    reg writeresult_bru0_dest[ROB_TAG_SIZE];
    reg writeresult_bru0_val[32];
    reg writeresult_bru0_target[32];
    proc_name writeresult_alu0(writeresult_alu0_dest, writeresult_alu0_val);
    proc_name writeresult_alu1(writeresult_alu1_dest, writeresult_alu1_val);
    proc_name writeresult_bru0(writeresult_bru0_dest, writeresult_bru0_val, writeresult_bru0_target);
    func_self flush();
    integer i_;
    /* Instruction Fetch Unit */
    ifetch_unit ifu;
    /* Instruction decoder */
    uop_decoder udec0;
    uop_decoder udec1;
    /* Reorder Buffer */
    reorder_buffer rob;
    /* Reservation station for ALUs */
    reservation_station alu_rs0;
    reservation_station alu_rs1;
    /* Reservation station for BRanch Unit */
    reservation_station bru_rs0;
    /* Reservation station for Load-Store Unit (In-order) */
    reservation_station_in_order lsu_rs0;
    /* General Purpose Register */
    register_file gpr;
    /* Register map table from rs fields to reorder buffer entry */
    mem register_map_table[32][ROB_TAG_SIZE] = {0};
    /* Register status table indexing with rs feilds */
    mem register_status_table[32][1] = {0};
    /* Load Store Unit */
    load_store_unit lsu;
    reg ifu_grant = 0;
    reg lsu_grant = 0;
    control_status_register csr;
    proc_name warm_reset();

    func reset {
        if(!warm_reset) {
            warm_reset.invoke();
        }
    }
    proc warm_reset seq {
        {
            ifu.reset();
            csr.reset();
        }
        {
            ifu.redirect(csr.trap(0, 0, 0));
            decode();
            finish();
        }
    }
    func flush {
        decode.finish();
        issue.finish();
        execute_alu0.finish();
        execute_alu1.finish();
        execute_bru0.finish();
        writeresult_alu0.finish();
        writeresult_alu1.finish();
        writeresult_bru0.finish();
        rob.flush();
        alu_rs0.flush();
        alu_rs1.flush();
        bru_rs0.flush();
        lsu_rs0.flush();
        lsu.flush();
        generate(i_ = 0; i_ < 32; i_++) {
            register_status_table[i_] := 0;
            register_map_table[i_] := 0;
        }
        decode.invoke();
    }
    proc decode {
        fetch_packet_t wire decode_fetch_packet1;
        fetch_packet_t reg decode_fetch_packet2;
        issue_packet_t wire decode_issue_packet;
        state_name decode1, decode2;
        uop_t wire decode_uop0;
        uop_t wire decode_uop1;

        /*
            Decode two instructions, if structual hazard for FUs occurs,
            Send first instruction to issue, then in next cycle, handle
            remaining instruction. otherwise send both instructions to
            issue.
        */
        state decode1 {
            if(!ifu.ibuf_empty && !stall_issue && !flush) {
                decode_fetch_packet1 = ifu.ibuf_pop();
                // Save fetch packet for decode2.
                decode_fetch_packet2 := decode_fetch_packet1;
                // Decode two instructions.
                udec0.decode(decode_fetch_packet1.inst0);
                udec1.decode(decode_fetch_packet1.inst1);
                decode_uop0 = udec0.uop;
                decode_uop1 = udec1.uop;
                // Check if structural hazard occurs for FUs.
                if(((udec0.uop_bru && decode_fetch_packet1.valid0) && (udec1.uop_bru && decode_fetch_packet1.valid1))
                    || ((udec0.uop_lsu && decode_fetch_packet1.valid0) && (udec1.uop_lsu && decode_fetch_packet1.valid1))
                    || (udec1.uop_system && decode_fetch_packet1.valid1)) {
                    // If hazard occurs, send first instructions to issue.
                    if(udec0.decode_csr) {
                        csr.decode_csr(udec0.decode_csr_rw, udec0.decode_csr_addr);
                    }
                    if(csr.decode_csr_illegal) {
                        udec0.decode_csr_illegal();
                    }
                    decode_issue_packet.inst0_valid     = decode_fetch_packet1.valid0;
                    decode_issue_packet.inst0_pred      = decode_fetch_packet1.pred0;
                    decode_issue_packet.inst0_pc        = decode_fetch_packet1.pc0;
                    decode_issue_packet.inst0           = decode_fetch_packet1.inst0;
                    decode_issue_packet.inst1_valid     = 0;
                    decode_issue_packet.inst1_pred      = 0;
                    decode_issue_packet.inst1_pc        = decode_fetch_packet1.pc1;
                    decode_issue_packet.inst1_npc       = decode_fetch_packet1.npc1;
                    decode_issue_packet.inst1           = 0;
                    issue.invoke(decode_issue_packet, udec0.uop, 0);
                    // Handle remaining instructions in next cycle.
                    goto decode2;
                } else {
                    // No structual hazard for FUs.
                    decode_issue_packet.inst0_valid     = decode_fetch_packet1.valid0;
                    decode_issue_packet.inst0_pred      = decode_fetch_packet1.pred0;
                    decode_issue_packet.inst0_pc        = decode_fetch_packet1.pc0;
                    decode_issue_packet.inst0           = decode_fetch_packet1.inst0;
                    decode_issue_packet.inst1_valid     = decode_fetch_packet1.valid1;
                    decode_issue_packet.inst1_pred      = decode_fetch_packet1.pred1;
                    decode_issue_packet.inst1_pc        = decode_fetch_packet1.pc1;
                    decode_issue_packet.inst1_npc       = decode_fetch_packet1.npc1;
                    decode_issue_packet.inst1           = decode_fetch_packet1.inst1;
                    decode();
                    issue(decode_issue_packet, udec0.uop, udec1.uop);
                }
            }
        }
        state decode2 {
            // Decode second instrction again.
            udec0.decode(decode_fetch_packet2.inst1);
            decode_uop0 = udec0.uop;
            if(flush) {
                decode();
                goto decode1;
            } else if(!stall_issue && !flush) {
                // Send second instruction to issue.
                if(udec0.decode_csr) {
                    csr.decode_csr(udec0.decode_csr_rw, udec0.decode_csr_addr);
                }
                if(csr.decode_csr_illegal) {
                    udec0.decode_csr_illegal();
                }
                decode_issue_packet.inst0_valid     = decode_fetch_packet2.valid1;
                decode_issue_packet.inst0_pred      = decode_fetch_packet2.pred1;
                decode_issue_packet.inst0_pc        = decode_fetch_packet2.pc1;
                decode_issue_packet.inst0           = decode_fetch_packet2.inst1;
                decode_issue_packet.inst1_valid     = 0;
                decode_issue_packet.inst1_pred      = 0;
                decode_issue_packet.inst1_pc        = decode_fetch_packet2.pc1;
                decode_issue_packet.inst1_npc       = decode_fetch_packet2.npc1;
                decode_issue_packet.inst1           = 0;

                issue.invoke(decode_issue_packet, udec0.uop, 0);
                goto decode1;
            }
        }
    }
    is_issue = (issue && !stall_issue);
    proc issue {
        wire issue_inst0_Qj[ROB_TAG_SIZE];
        wire issue_inst0_Qk[ROB_TAG_SIZE];
        wire issue_inst0_Vj[32];
        wire issue_inst0_Vk[32];
        wire issue_inst1_Qj[ROB_TAG_SIZE];
        wire issue_inst1_Qk[ROB_TAG_SIZE];
        wire issue_inst1_Vj[32];
        wire issue_inst1_Vk[32];

        if(!rob.full && !alu_rs0.full && !alu_rs1.full && !bru_rs0.full && !lsu_rs0.full && !flush) {
            /* TODO: Optimize RSs free entry check */
            /* inst0 rs1 read */
            if(issue_packet.inst0_valid) {
                if(issue_uop0.csr_read) {
                    csr.read(issue_uop0.csr_addr);
                }
                any {
                    (issue_uop0.rs1_sel == RS1_SEL_PC): {
                        issue_inst0_Vj = issue_packet.inst0_pc;
                        issue_inst0_Qj = 0;
                    }
                    (issue_uop0.rs1_sel == RS1_SEL_REG): {
                        if(issue_uop0.lrs1 == 5'b00000) {
                            issue_inst0_Vj = 0;
                            issue_inst0_Qj = 0;
                        } else if(register_status_table[issue_uop0.lrs1] == BUSY) {
                            if(rob.read_operandA(register_map_table[issue_uop0.lrs1]) == BUSY) {
                                /* Wait for inst in ROB to produce value */
                                issue_inst0_Vj = 0;
                                issue_inst0_Qj = register_map_table[issue_uop0.lrs1];
                            } else {
                                /* Use value inside ROB */
                                issue_inst0_Vj = rob.read_operandA_val;
                                issue_inst0_Qj = 0;
                            }
                        } else {
                            // Operand is in register file.
                            issue_inst0_Vj = gpr.readA(issue_uop0.lrs1);
                            issue_inst0_Qj = 0;
                        }
                    }
                    (issue_uop0.rs1_sel == RS1_SEL_UIMM): {
                        issue_inst0_Vj = 32'(issue_uop0.lrs1);
                        issue_inst0_Qj = 0;
                    }
                }
                /* inst0 rs2 read */
                any {
                    (issue_uop0.rs2_sel == RS2_SEL_REG): {
                        if(issue_uop0.lrs2 == 5'b00000) {
                            issue_inst0_Vk = 0;
                            issue_inst0_Qk = 0;
                        } else if(register_status_table[issue_uop0.lrs2] == BUSY) {
                            if(rob.read_operandB(register_map_table[issue_uop0.lrs2]) == BUSY) {
                                /* Wait for inst in ROB to produce value */
                                issue_inst0_Vk = 0;
                                issue_inst0_Qk = register_map_table[issue_uop0.lrs2];
                            } else {
                                /* Use value inside ROB */
                                issue_inst0_Vk = rob.read_operandB_val;
                                issue_inst0_Qk = 0;
                            }
                        } else {
                            issue_inst0_Vk = gpr.readB(issue_uop0.lrs2);
                            issue_inst0_Qk = 0;
                        }
                    }
                    (issue_uop0.rs2_sel == RS2_SEL_IMM): {
                        issue_inst0_Vk = issue_uop0.imm;
                        issue_inst0_Qk = 0;
                    }
                    (issue_uop0.rs2_sel == RS2_SEL_CSR): {
                        issue_inst0_Vk = csr.csr_rdata;
                        issue_inst0_Qk = 0;
                    }
                    (issue_uop0.rs2_sel == RS2_SEL_CSR_UIMM): {
                        issue_inst0_Vk = csr.csr_rdata & 0xffffffe0;
                        issue_inst0_Qk = 0;
                    }
                }
                /* inst0 rd mapping */
                if((issue_uop0.lrd != 0) && !(issue_packet.inst1_valid && (issue_uop0.lrd == issue_uop1.lrd))) {
                    register_map_table[issue_uop0.lrd] := rob.tag;
                    register_status_table[issue_uop0.lrd] := BUSY;
                }
                /* Issue inst0 to RSs */
                alt {
                    issue_uop0.jalr || issue_uop0.jal || issue_uop0.branch: {
                        bru_rs0.issue(
                            issue_packet.inst0_valid, issue_uop0, issue_inst0_Vj, issue_inst0_Vk, issue_inst0_Qj, issue_inst0_Qk, rob.tag, issue_packet.inst0_pc + issue_uop0.imm
                        );
                    }
                    issue_uop0.load || issue_uop0.store: {
                        lsu_rs0.issue(issue_packet.inst0_valid, issue_uop0, issue_inst0_Vj, issue_inst0_Vk, issue_inst0_Qj, issue_inst0_Qk, rob.tag, issue_uop0.imm);
                    }
                    else: {
                        alu_rs0.issue(
                            issue_packet.inst0_valid, issue_uop0, issue_inst0_Vj, issue_inst0_Vk, issue_inst0_Qj, issue_inst0_Qk, rob.tag, 0);
                    }
                }
            }
            if(issue_packet.inst1_valid) { /* inst1 rs1 read */
                if(issue_uop1.csr_read) {
                    csr.read(issue_uop1.csr_addr);
                }
                any {
                    (issue_uop1.rs1_sel == RS1_SEL_PC): {
                        issue_inst1_Vj = issue_packet.inst1_pc;
                        issue_inst1_Qj = 0;
                    }
                    (issue_uop1.rs1_sel == RS1_SEL_REG): {
                        if(issue_uop1.lrs1 == 5'b00000) {
                            issue_inst1_Vj = 0;
                            issue_inst1_Qj = 0;
                        } else if((issue_uop0.lrd == issue_uop1.lrs1) && issue_packet.inst0_valid) {
                            issue_inst1_Vj = 0;
                            issue_inst1_Qj = rob.tag;
                        } else {
                            if(register_status_table[issue_uop1.lrs1] == BUSY) {
                                if(rob.read_operandC(register_map_table[issue_uop1.lrs1]) == BUSY) {
                                    /* Wait for inst in ROB to produce value */
                                    issue_inst1_Vj = 0;
                                    issue_inst1_Qj = register_map_table[issue_uop1.lrs1];
                                } else {
                                    /* Use value inside ROB */
                                    issue_inst1_Vj = rob.read_operandC_val;
                                    issue_inst1_Qj = 0;
                                }
                            } else {
                                issue_inst1_Vj = gpr.readC(issue_uop1.lrs1);
                                issue_inst1_Qj = 0;
                            }
                        }
                    }
                    (issue_uop1.rs1_sel == RS1_SEL_UIMM): {
                        issue_inst1_Vj = 32'(issue_uop1.lrs1);
                        issue_inst1_Qj = 0;
                    }
                }
                /* inst1 rs2 read */
                any {
                    (issue_uop1.rs2_sel == RS2_SEL_REG): {
                        if(issue_uop1.lrs2 == 5'b00000) {
                            issue_inst1_Vk = 0;
                            issue_inst1_Qk = 0;
                        } else if((issue_uop0.lrd == issue_uop1.lrs2) && issue_packet.inst0_valid) {
                            issue_inst1_Vk = 0;
                            issue_inst1_Qk = rob.tag;
                        } else {
                            if(register_status_table[issue_uop1.lrs2] == BUSY) {
                                if(rob.read_operandD(register_map_table[issue_uop1.lrs2]) == BUSY) {
                                    /* Wait for inst in ROB to produce value */
                                    issue_inst1_Vk = 0;
                                    issue_inst1_Qk = register_map_table[issue_uop1.lrs2];
                                } else {
                                    /* Use value inside ROB */
                                    issue_inst1_Vk = rob.read_operandD_val;
                                    issue_inst1_Qk = 0;
                                }
                            } else {
                                issue_inst1_Vk = gpr.readD(issue_uop1.lrs2);
                                issue_inst1_Qk = 0;
                            }
                        }
                    }
                    (issue_uop1.rs2_sel == RS2_SEL_IMM): {
                        issue_inst1_Vk = issue_uop1.imm;
                        issue_inst1_Qk = 0;
                    }
                    (issue_uop1.rs2_sel == RS2_SEL_CSR): {
                        // TODO: for now, csr is not decoded in this slot
                        issue_inst1_Vk = csr.csr_rdata;
                        issue_inst1_Qk = 0;
                    }
                    (issue_uop1.rs2_sel == RS2_SEL_CSR_UIMM): {
                        // TODO: for now, csr is not decoded in this slot
                        issue_inst1_Vk = csr.csr_rdata & 0xffffffe0;
                        issue_inst1_Qk = 0;
                    }
                }
                /* inst1 rd mapping */
                if((issue_uop1.lrd != 0)) {
                    register_map_table[issue_uop1.lrd] := rob.tag+1;
                    register_status_table[issue_uop1.lrd] := BUSY;
                }
                /* Issue inst1 to RSs */
                alt {
                    issue_uop1.jalr || issue_uop1.jal || issue_uop1.branch: {
                        bru_rs0.issue(
                            issue_packet.inst1_valid, issue_uop1, issue_inst1_Vj, issue_inst1_Vk, issue_inst1_Qj, issue_inst1_Qk, rob.tag+1, issue_packet.inst1_pc + issue_uop1.imm
                        );
                    }
                    issue_uop1.load || issue_uop1.store: {
                        lsu_rs0.issue(issue_packet.inst1_valid, issue_uop1, issue_inst1_Vj, issue_inst1_Vk, issue_inst1_Qj, issue_inst1_Qk, rob.tag+1, issue_uop1.imm);
                    }
                    else: {
                        alu_rs1.issue(
                            issue_packet.inst1_valid, issue_uop1, issue_inst1_Vj, issue_inst1_Vk, issue_inst1_Qj, issue_inst1_Qk, rob.tag+1, 0);
                    }
                }
            }
            rob.issue(
                issue_packet.inst0_valid, issue_packet.inst0_pc, issue_packet.inst0, (issue_uop0|{rob.tag, issue_inst0_Qj, issue_inst0_Qk}),
                issue_packet.inst1_valid, issue_packet.inst1_pc, issue_packet.inst1, (issue_uop1|{rob.tag+1, issue_inst1_Qj, issue_inst1_Qk}),
                issue_uop0.csr_addr, csr.csr_rdata
            );
            finish();
        } else {
            stall_issue();
        }
    }
    func alu_rs0.dispatch {
        uop_t wire alu_rs0_uop;

        alu_rs0_uop = alu_rs0.dispatch_Op;
        if(!flush) {
            execute_alu0.invoke(alu_rs0_uop.fn, alu_rs0.dispatch_Dest, alu_rs0.dispatch_Vj, alu_rs0.dispatch_Vk);
        }
    }
    func alu_rs1.dispatch {
        uop_t wire alu_rs1_uop;

        alu_rs1_uop = alu_rs1.dispatch_Op;
        if(!flush) {
            execute_alu1.invoke(alu_rs1_uop.fn, alu_rs1.dispatch_Dest, alu_rs1.dispatch_Vj, alu_rs1.dispatch_Vk);
        }
    }
    func bru_rs0.dispatch {
        uop_t wire bru_rs0_uop;

        bru_rs0_uop = bru_rs0.dispatch_Op;
        if(!flush) {
            if(bru_rs0_uop.uop == uOP_BRU_JALR) {
                execute_bru0.invoke(bru_rs0_uop.fn, bru_rs0.dispatch_Dest, bru_rs0.dispatch_Vj, bru_rs0.dispatch_Vk, bru_rs0.dispatch_Vj + bru_rs0.dispatch_Vk);
            } else {
                execute_bru0.invoke(bru_rs0_uop.fn, bru_rs0.dispatch_Dest, bru_rs0.dispatch_Vj, bru_rs0.dispatch_Vk, bru_rs0.dispatch_A);
            }
        }
    }
    if(lsu.full) {
        lsu_rs0.stall();
    }
    func lsu_rs0.dispatch {
        wire lsu_rs0_dispatch_Addr[32];
        uop_t wire lsu_rs0_uop;

        lsu_rs0_uop = lsu_rs0.dispatch_Op;
        if(!flush && !lsu.full) {
            if((lsu_rs0_uop.uop == uOP_LSU_STORE_WORD) || (lsu_rs0_uop.uop == uOP_LSU_STORE_HALFWORD) || (lsu_rs0_uop.uop == uOP_LSU_STORE_BYTE)) {
                rob.Store(lsu_rs0.dispatch_Dest);
            }
            lsu_rs0_dispatch_Addr = lsu_rs0.dispatch_Vj + lsu_rs0.dispatch_A;
            lsu.issue(lsu_rs0_dispatch_Addr, lsu_rs0_uop.uop, lsu_rs0.dispatch_Vk, lsu_rs0.dispatch_Dest);
        }
    }
    proc execute_alu0 {
        alu32 alu0;

        if(!flush) {
            alu0.exe(execute_alu0_a, execute_alu0_b, execute_alu0_fn);
            writeresult_alu0(execute_alu0_dest, alu0.q);
        }
    }
    proc execute_alu1 {
        alu32 alu1;

        if(!flush) {
            alu1.exe(execute_alu1_a, execute_alu1_b, execute_alu1_fn);
            writeresult_alu1(execute_alu1_dest, alu1.q);
        }
    }
    proc execute_bru0 {
        func_self execute_bru0_taken;
        bru32 bru0;

        if(!flush) {
            bru0.exe(execute_bru0_a, execute_bru0_b, execute_bru0_fn);
            writeresult_bru0(execute_bru0_dest, bru0.taken, execute_bru0_A);
        }
    }
    proc writeresult_alu0 {
        if(!flush) {
            alu_rs0.CDB0(writeresult_alu0_dest, writeresult_alu0_val);
            alu_rs1.CDB0(writeresult_alu0_dest, writeresult_alu0_val);
            bru_rs0.CDB0(writeresult_alu0_dest, writeresult_alu0_val);
            lsu_rs0.CDB0(writeresult_alu0_dest, writeresult_alu0_val);
            rob.CDB0(writeresult_alu0_dest, writeresult_alu0_val);
            finish();
        }
    }
    proc writeresult_alu1 {
        if(!flush) {
            alu_rs0.CDB1(writeresult_alu1_dest, writeresult_alu1_val);
            alu_rs1.CDB1(writeresult_alu1_dest, writeresult_alu1_val);
            bru_rs0.CDB1(writeresult_alu1_dest, writeresult_alu1_val);
            lsu_rs0.CDB1(writeresult_alu1_dest, writeresult_alu1_val);
            rob.CDB1(writeresult_alu1_dest, writeresult_alu1_val);
            finish();
        }
    }
    proc writeresult_bru0 {
        if(!flush) {
            alu_rs0.CDB2(writeresult_bru0_dest, writeresult_bru0_val);
            alu_rs1.CDB2(writeresult_bru0_dest, writeresult_bru0_val);
            bru_rs0.CDB2(writeresult_bru0_dest, writeresult_bru0_val);
            lsu_rs0.CDB2(writeresult_bru0_dest, writeresult_bru0_val);
            rob.CDB2(writeresult_bru0_dest, writeresult_bru0_val, writeresult_bru0_target);
            finish();
        }
    }
    func lsu.CDBOut {
        if(!flush) {
            alu_rs0.CDB3(lsu.CDBOutId, lsu.CDBOutVal);
            alu_rs1.CDB3(lsu.CDBOutId, lsu.CDBOutVal);
            bru_rs0.CDB3(lsu.CDBOutId, lsu.CDBOutVal);
            lsu_rs0.CDB3(lsu.CDBOutId, lsu.CDBOutVal);
            rob.CDB3(lsu.CDBOutId, lsu.CDBOutVal);
        }
    }
    func rob.commit {
        cause_t wire commit_inst0_cause;
        cause_t wire commit_inst1_cause;
        func_self commit_kill_inst1;
        uop_t wire commit_uop0;
        uop_t wire commit_uop1;
        
        csr.update_instret();
        if(rob.commit_Valid0) {
            commit_uop0 = rob.commit_uOp0;
            commit_inst0_cause = commit_uop0.cause;
            alt {
                csr.msip && csr.msie && ((csr.mstatus_mie && csr.priv_mode == MACHINE) || (csr.priv_mode < MACHINE)): {
                    flush();
                    commit_kill_inst1();
                    ifu.redirect(csr.trap(MACHINE_SOFTWARE_INTERRUPT, rob.commit_PC0, rob.commit_Inst0));
                }
                csr.mtip && csr.mtie && ((csr.mstatus_mie && csr.priv_mode == MACHINE) || (csr.priv_mode < MACHINE)): {
                    flush();
                    commit_kill_inst1();
                    ifu.redirect(csr.trap(MACHINE_TIMER_INTERRUPT, rob.commit_PC0, rob.commit_Inst0));
                }
                commit_inst0_cause.illegal_instruction: {
                    flush();
                    commit_kill_inst1();
                    ifu.redirect(csr.trap(ILLEGAL_INSTRUCTION, rob.commit_PC0, rob.commit_Inst0));
                }
                commit_inst0_cause.environment_call_from_m_mode: {
                    flush();
                    commit_kill_inst1();
                    ifu.redirect(csr.trap(ENVIRONMENT_CALL_FROM_M_MODE, rob.commit_PC0, rob.commit_Inst0));
                    DEBUG_COMMIT0(rob.commit_PC0, rob.commit_Inst0, commit_uop0.cause);
                }
                commit_inst0_cause.breakpoint: {
                    flush();
                    commit_kill_inst1();
                    ifu.redirect(csr.trap(BREAKPOINT, rob.commit_PC0, rob.commit_Inst0));
                    DEBUG_COMMIT0(rob.commit_PC0, rob.commit_Inst0, commit_uop0.cause);
                }
                (commit_uop0.jal || commit_uop0.jalr): {
                    // Jump instruction always redirect and flush pipeline.
                    gpr.writeA(commit_uop0.lrd, rob.commit_PC0+4);
                    ifu.redirect(rob.commit_Target0);
                    commit_kill_inst1();
                    flush();
                    DEBUG_COMMIT0(rob.commit_PC0, rob.commit_Inst0, commit_uop0.cause);
                }
                (commit_uop0.branch && (rob.commit_Value0[0] == 1)): {
                    // Branch instruction only redirect and flush pipeline if branch is taken.
                    ifu.redirect(rob.commit_Target0);
                    commit_kill_inst1();
                    flush();
                    DEBUG_COMMIT0(rob.commit_PC0, rob.commit_Inst0, commit_uop0.cause);
                }
                (commit_uop0.store): {
                    lsu.commit(commit_uop0.lrd);
                    DEBUG_COMMIT0(rob.commit_PC0, rob.commit_Inst0, commit_uop0.cause);
                }
                (commit_uop0.mret): {
                    ifu.redirect(csr.mret());
                    commit_kill_inst1();
                    flush();
                    DEBUG_COMMIT0(rob.commit_PC0, rob.commit_Inst0, commit_uop0.cause);
                }
                (commit_uop0.ecall || commit_uop0.ebreak): {
                    gpr.writeA(commit_uop0.lrd, rob.commit_CSR_Value);
                    ifu.redirect(rob.commit_PC0 + 4);
                    commit_kill_inst1();
                    flush();
                    DEBUG_COMMIT0(rob.commit_PC0, rob.commit_Inst0, commit_uop0.cause);
                }
                (commit_uop0.csr_write): {
                    csr.write(rob.commit_CSR_num, rob.commit_Value0);
                    gpr.writeA(commit_uop0.lrd, rob.commit_CSR_Value);
                    ifu.redirect(rob.commit_PC0 + 4);
                    commit_kill_inst1();
                    flush();
                    DEBUG_COMMIT0(rob.commit_PC0, rob.commit_Inst0, commit_uop0.cause);
                }
                else: {
                    // Other instructions which has Dest register field.
                    gpr.writeA(commit_uop0.lrd, rob.commit_Value0);
                    DEBUG_COMMIT0(rob.commit_PC0, rob.commit_Inst0, commit_uop0.cause);
                }
            }
       }
       if(rob.commit_Valid1 && !commit_kill_inst1) {
            commit_uop1 = rob.commit_uOp1;
            commit_inst1_cause = commit_uop1.cause;
            alt {
                csr.msip && csr.msie && ((csr.mstatus_mie && csr.priv_mode == MACHINE) || (csr.priv_mode < MACHINE)): {
                    flush();
                    ifu.redirect(csr.trap(MACHINE_SOFTWARE_INTERRUPT, rob.commit_PC1, rob.commit_Inst1));
                }
                csr.mtip && csr.mtie && ((csr.mstatus_mie && csr.priv_mode == MACHINE) || (csr.priv_mode < MACHINE)): {
                    flush();
                    ifu.redirect(csr.trap(MACHINE_TIMER_INTERRUPT, rob.commit_PC1, rob.commit_Inst1));
                }
                commit_inst1_cause.illegal_instruction: {
                    flush();
                    ifu.redirect(csr.trap(ILLEGAL_INSTRUCTION, rob.commit_PC1, rob.commit_Inst1));
                }
                commit_inst1_cause.environment_call_from_m_mode: {
                    flush();
                    ifu.redirect(csr.trap(ENVIRONMENT_CALL_FROM_M_MODE, rob.commit_PC1, rob.commit_Inst1));
                    DEBUG_COMMIT1(rob.commit_PC1, rob.commit_Inst1, commit_uop1.cause);
                }
                commit_inst1_cause.breakpoint: {
                    flush();
                    ifu.redirect(csr.trap(ENVIRONMENT_CALL_FROM_M_MODE, rob.commit_PC1, rob.commit_Inst1));
                    DEBUG_COMMIT1(rob.commit_PC1, rob.commit_Inst1, commit_uop1.cause);
                }
                (commit_uop1.jal || commit_uop1.jalr): {
                    // Jump instruction always redirect and flush pipeline.
                    gpr.writeB(commit_uop1.lrd, rob.commit_PC1+4);
                    ifu.redirect(rob.commit_Target1);
                    flush();
                    DEBUG_COMMIT1(rob.commit_PC1, rob.commit_Inst1, commit_uop1.cause);
                }
                (commit_uop1.branch && (rob.commit_Value1[0] == 1)): {
                    // Branch instruction only redirect and flush pipeline if branch is taken.
                    ifu.redirect(rob.commit_Target1);
                    flush();
                    DEBUG_COMMIT1(rob.commit_PC1, rob.commit_Inst1, commit_uop1.cause);
                }
                (commit_uop1.store): {
                    lsu.commit(commit_uop1.lrd);
                    DEBUG_COMMIT1(rob.commit_PC1, rob.commit_Inst1, commit_uop1.cause);
                }
                (commit_uop1.mret): {
                    ifu.redirect(csr.mret());
                    flush();
                    DEBUG_COMMIT1(rob.commit_PC1, rob.commit_Inst1, commit_uop1.cause);
                }
                (commit_uop1.ecall || commit_uop1.ebreak): {
                    gpr.writeB(commit_uop1.lrd, rob.commit_CSR_Value);
                    ifu.redirect(rob.commit_PC1 + 4);
                    flush();
                    DEBUG_COMMIT1(rob.commit_PC1, rob.commit_Inst1, commit_uop1.cause);
                }
                (commit_uop1.csr_write): {
                    csr.write(rob.commit_CSR_num, rob.commit_Value1);
                    gpr.writeB(commit_uop1.lrd, rob.commit_CSR_Value);
                    ifu.redirect(rob.commit_PC1 + 4);
                    flush();
                    DEBUG_COMMIT1(rob.commit_PC1, rob.commit_Inst1, commit_uop1.cause);
                }
                else: {
                    // Other instructions which has Dest register field.
                    gpr.writeB(commit_uop1.lrd, rob.commit_Value1);
                    DEBUG_COMMIT1(rob.commit_PC1, rob.commit_Inst1, commit_uop1.cause);
                }
            }
        }
        if(!flush && rob.commit_Valid0 && !(is_issue
            && (issue_packet.inst0_valid && issue_uop0.lrd == commit_uop0.lrd)
            && (issue_packet.inst1_valid && issue_uop1.lrd == commit_uop0.lrd)
            && (rob.commit_Valid1 && commit_uop0.lrd == commit_uop1.lrd))) {
            /* If rd field of instruction in issue stage has same register destination,
                conflict will occur for register_status_table, so do not make READY.
                issue_uop0.lrd is only valid on is_issue.
                if ROB.Dest0 == ROB.Dest1, do not make READY here, it will be handled
                in ROB.Dest1 side
            */
            if((rob.commit_Id == register_map_table[commit_uop0.lrd])) {
                // Branch instruction has no Dest register.
                register_status_table[commit_uop0.lrd] := READY;
            }
        }
        if(!flush && rob.commit_Valid1 && !(is_issue
            && (issue_packet.inst0_valid && issue_uop0.lrd == commit_uop1.lrd)
            && (issue_packet.inst1_valid && issue_uop1.lrd == commit_uop1.lrd))) {
            /* If rd field of instruction in issue stage has same register destination,
                conflict will occur for register_status_table, so do not make READY.
                issue_uop1.lrd is only valid on is_issue.
            */
            if((rob.commit_Id+1 == register_map_table[commit_uop1.lrd])) {
                // Branch instruction has no Dest register.
                register_status_table[commit_uop1.lrd] := READY;
            }
        }
    }
    func timer_interrupt_req_hart0 {
        csr.timer_interrupt_req_hart0();
    }
    func software_interrupt_req_hart0 {
        csr.software_interrupt_req_hart0();
    }

    ifu.CLK_I = CLK_I;
    ifu.RST_I = RST_I;
    lsu.CLK_I = CLK_I;
    lsu.RST_I = RST_I;

    alt {
        lsu.CYC_O && !lsu_grant && !ifu_grant: {
            lsu_grant := 1;
            lsu.STALL_I();
            ifu.STALL_I();
        }
        ifu.CYC_O && !ifu_grant && !lsu_grant: {
            ifu_grant := 1;
            lsu.STALL_I();
            ifu.STALL_I();
        }
    }
    alt {
        lsu_grant && lsu.CYC_O && ACK_I: {
            lsu_grant := 0;
        }
        ifu_grant && ifu.CYC_O && ACK_I: {
            ifu_grant := 0;
        }
    }

    alt {
        lsu_grant: {
            ADR_O = lsu.ADR_O;
            SEL_O = lsu.SEL_O;
            DAT_O = lsu.DAT_O;
            if(lsu.CYC_O) CYC_O();
            if(lsu.STB_O) STB_O();
            if(lsu.WE_O) WE_O();
            if(lsu.LOCK_O) LOCK_O();
            lsu.DAT_I = DAT_I;
            if(ERR_I) lsu.ERR_I();
            if(RTY_I) lsu.RTY_I();
            if(STALL_I) lsu.STALL_I();
            if(ACK_I) lsu.ACK_I();
            ifu.STALL_I();
        }
        ifu_grant: {
            ADR_O = ifu.ADR_O;
            SEL_O = ifu.SEL_O;
            DAT_O = ifu.DAT_O;
            if(ifu.CYC_O) CYC_O();
            if(ifu.STB_O) STB_O();
            if(ifu.WE_O) WE_O();
            if(ifu.LOCK_O) LOCK_O();
            ifu.DAT_I = DAT_I;
            if(ERR_I) ifu.ERR_I();
            if(RTY_I) ifu.RTY_I();
            if(STALL_I) ifu.STALL_I();
            if(ACK_I) ifu.ACK_I();
            lsu.STALL_I();
        }
    }
}
