#include "register_file.h"
#include "riscv.h"

// Implement LVT based multi ported RAM
// Efficient Multi-Ported Memories for FPGAs
// Charles Eric LaForest and J. Gregory Steffan
module register_file {
    mem bank_w0_r0[64][XLEN] = {0};
    mem bank_w0_r1[64][XLEN] = {0};
    mem bank_w0_r2[64][XLEN] = {0};
    mem bank_w0_r3[64][XLEN] = {0};
    mem bank_w1_r0[64][XLEN] = {0};
    mem bank_w1_r1[64][XLEN] = {0};
    mem bank_w1_r2[64][XLEN] = {0};
    mem bank_w1_r3[64][XLEN] = {0};
    mem lvt[64] = {0};

    func readA {
        any {
            lvt[rnumA] == 0: return bank_w0_r0[rnumA];
            lvt[rnumA] == 1: return bank_w1_r0[rnumA];
        }
    }
    func readB {
        any {
            lvt[rnumB] == 0: return bank_w0_r1[rnumB];
            lvt[rnumB] == 1: return bank_w1_r1[rnumB];
        }
    }
    func readC {
        any {
            lvt[rnumC] == 0: return bank_w0_r2[rnumC];
            lvt[rnumC] == 1: return bank_w1_r2[rnumC];
        }
    }
    func readD {
        any {
            lvt[rnumD] == 0: return bank_w0_r3[rnumD];
            lvt[rnumD] == 1: return bank_w1_r3[rnumD];
        }
    }
    func writeA {
        if(!(writeB && (wnumA == wnumB))) {
            lvt[wnumA] := 0;
            bank_w0_r0[wnumA] := wdataA;
            bank_w0_r1[wnumA] := wdataA;
            bank_w0_r2[wnumA] := wdataA;
            bank_w0_r3[wnumA] := wdataA;
        }
    }
    func writeB {
        lvt[wnumB] := 1;
        bank_w1_r0[wnumB] := wdataB;
        bank_w1_r1[wnumB] := wdataB;
        bank_w1_r2[wnumB] := wdataB;
        bank_w1_r3[wnumB] := wdataB;
    }
}
