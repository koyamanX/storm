#include "issue_queue_in_order.h"

module issue_queue_in_order {
	// TODO: rename
    issue_queue_in_order_t reg rs0 = 0;
    issue_queue_in_order_t reg rs1 = 0;
    issue_queue_in_order_t reg rs2 = 0;
    issue_queue_in_order_t reg rs3 = 0;
    func_self dispatch_rs0();
    func_self dispatch_rs1();
    func_self dispatch_rs2();
    func_self dispatch_rs3();
	reg tail[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES+1] = 0;
	reg head[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES+1] = 0;
	wire next_head[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES+1];
	wire next_tail[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES+1];

	next_tail = tail + 1;
	next_head = head + 1;
    func issue {
        issue_queue_in_order_t wire new_entry;
        if(!flush) {
            new_entry.valid = 1;
            new_entry.ptr = ptr;
            new_entry.uop = uop;
			new_entry.prs1 = prs1;
			new_entry.prs2 = prs2;
			new_entry.prd = prd;
			new_entry.imm = imm;
            any {
                wakeup0 && (prs1 == wakeup0_prd): {new_entry.prs1_ready = READY;}
                wakeup1 && (prs1 == wakeup1_prd): {new_entry.prs1_ready = READY;}
                wakeup2 && (prs1 == wakeup2_prd): {new_entry.prs1_ready = READY;}
				else: {new_entry.prs1_ready = prs1_ready;}
            }
            any {
                wakeup0 && (prs2 == wakeup0_prd): {new_entry.prs2_ready = READY;}
                wakeup1 && (prs2 == wakeup1_prd): {new_entry.prs2_ready = READY;}
                wakeup2 && (prs2 == wakeup2_prd): {new_entry.prs2_ready = READY;}
				else: {new_entry.prs2_ready = prs2_ready;}
            }
			any {
				tail[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES-1:0] == 0: rs0 := new_entry;
				tail[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES-1:0] == 1: rs1 := new_entry;
				tail[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES-1:0] == 2: rs2 := new_entry;
				tail[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES-1:0] == 3: rs3 := new_entry;
			}
			tail := next_tail;
        }
    }
    if(!flush && !stall) {
        alt {
			// TODO: check prs{1,2}_valid
            head[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES-1:0] == 0 && rs0.valid && (rs0.prs1_ready == READY) && (rs0.prs2_ready == READY): {
                dispatch_rs0();
            }
            head[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES-1:0] == 1 && rs1.valid && (rs1.prs1_ready == READY) && (rs1.prs2_ready == READY): {
                dispatch_rs1();
            }
            head[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES-1:0] == 2 && rs2.valid && (rs2.prs1_ready == READY) && (rs2.prs2_ready == READY): {
                dispatch_rs2();
            }
            head[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES-1:0] == 3 && rs3.valid && (rs3.prs1_ready == READY) && (rs3.prs2_ready == READY): {
                dispatch_rs3();
            }
        }
		if(dispatch_rs0 || dispatch_rs1 || dispatch_rs2 || dispatch_rs3) {
			head := next_head;
		}
    }
    func dispatch_rs0 {
        rs0 := 0;
        dispatch(rs0.ptr, rs0.uop, rs0.prd, rs0.prs1, rs0.prs2, rs0.imm);
    }
    func dispatch_rs1 {
        rs1 := 0;
        dispatch(rs1.ptr, rs1.uop, rs1.prd, rs1.prs1, rs1.prs2, rs1.imm);
    }
    func dispatch_rs2 {
        rs2 := 0;
        dispatch(rs2.ptr, rs2.uop, rs2.prd, rs2.prs1, rs2.prs2, rs2.imm);
    }
    func dispatch_rs3 {
        rs3 := 0;
        dispatch(rs3.ptr, rs3.uop, rs3.prd, rs3.prs1, rs3.prs2, rs3.imm);
    }
    func wakeup0 {
        if(!flush) {
            any {
                (rs3.valid && rs3.prs1 == wakeup0_prd) && rs3.valid: {rs3.prs1_ready := READY;}
                (rs3.valid && rs3.prs2 == wakeup0_prd) && rs3.valid: {rs3.prs2_ready := READY;}
                (rs2.valid && rs2.prs1 == wakeup0_prd) && rs2.valid: {rs2.prs1_ready := READY;}
                (rs2.valid && rs2.prs2 == wakeup0_prd) && rs2.valid: {rs2.prs2_ready := READY;}
                (rs1.valid && rs1.prs1 == wakeup0_prd) && rs1.valid: {rs1.prs1_ready := READY;}
                (rs1.valid && rs1.prs2 == wakeup0_prd) && rs1.valid: {rs1.prs2_ready := READY;}
                (rs0.valid && rs0.prs1 == wakeup0_prd) && rs0.valid: {rs0.prs1_ready := READY;}
                (rs0.valid && rs0.prs2 == wakeup0_prd) && rs0.valid: {rs0.prs2_ready := READY;}
            }
        }
    }
    func wakeup1 {
        if(!flush) {
            any {
                (rs3.valid && rs3.prs1 == wakeup1_prd) && rs3.valid: {rs3.prs1_ready := READY;}
                (rs3.valid && rs3.prs2 == wakeup1_prd) && rs3.valid: {rs3.prs2_ready := READY;}
                (rs2.valid && rs2.prs1 == wakeup1_prd) && rs2.valid: {rs2.prs1_ready := READY;}
                (rs2.valid && rs2.prs2 == wakeup1_prd) && rs2.valid: {rs2.prs2_ready := READY;}
                (rs1.valid && rs1.prs1 == wakeup1_prd) && rs1.valid: {rs1.prs1_ready := READY;}
                (rs1.valid && rs1.prs2 == wakeup1_prd) && rs1.valid: {rs1.prs2_ready := READY;}
                (rs0.valid && rs0.prs1 == wakeup1_prd) && rs0.valid: {rs0.prs1_ready := READY;}
                (rs0.valid && rs0.prs2 == wakeup1_prd) && rs0.valid: {rs0.prs2_ready := READY;}
            }
        }
    }
    func wakeup2 {
        if(!flush) {
            any {
                (rs3.valid && rs3.prs1 == wakeup2_prd) && rs3.valid: {rs3.prs1_ready := READY;}
                (rs3.valid && rs3.prs2 == wakeup2_prd) && rs3.valid: {rs3.prs2_ready := READY;}
                (rs2.valid && rs2.prs1 == wakeup2_prd) && rs2.valid: {rs2.prs1_ready := READY;}
                (rs2.valid && rs2.prs2 == wakeup2_prd) && rs2.valid: {rs2.prs2_ready := READY;}
                (rs1.valid && rs1.prs1 == wakeup2_prd) && rs1.valid: {rs1.prs1_ready := READY;}
                (rs1.valid && rs1.prs2 == wakeup2_prd) && rs1.valid: {rs1.prs2_ready := READY;}
                (rs0.valid && rs0.prs1 == wakeup2_prd) && rs0.valid: {rs0.prs1_ready := READY;}
                (rs0.valid && rs0.prs2 == wakeup2_prd) && rs0.valid: {rs0.prs2_ready := READY;}
            }
        }
    }
    func flush {
        rs3 := 0;
        rs2 := 0;
        rs1 := 0;
        rs0 := 0;
		head := 0;
		tail := 0;
    }
    if(!flush) {
        if((tail[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES-1:0] == head[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES-1:0])
            && (tail[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES] != head[LOG2_ISSUE_QUEUE_IN_ORDER_NUM_OF_ENTRIES])) {
            full();
        }
    }

}
