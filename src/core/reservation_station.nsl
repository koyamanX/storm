#include "reservation_station.h"
#include "reservation_station_entry.h"

module reservation_station {
    reservation_station_entry rs[NUMBER_OF_RS];
    variable isFull;
    variable isBusyArray[NUMBER_OF_RS];
    variable isDispatchableArray[NUMBER_OF_RS];
    integer i_;
    reservation_station_entry_t wire dispatch_entry;

    isBusyArray = 0;
    isDispatchableArray = 0;
    generate(i_ = 0; i_ < NUMBER_OF_RS; i_++) {
        isBusyArray[i_] = rs[i_].isBusy();
        isDispatchableArray[i_] = rs[i_].dispatchable;
    }
    func issue {
        wire issue_Qj[ROB_TAG_SIZE];
        wire issue_Qk[ROB_TAG_SIZE];
        wire issue_Vj[32];
        wire issue_Vk[32];

        /* Bypass */
        any {
            CDB0 && (Qj == CDB0Id) && Valid: {issue_Vj = CDB0Val; issue_Qj = 0;}
            CDB1 && (Qj == CDB1Id) && Valid: {issue_Vj = CDB1Val; issue_Qj = 0;}
            CDB2 && (Qj == CDB2Id) && Valid: {issue_Vj = CDB2Val; issue_Qj = 0;}
            CDB3 && (Qj == CDB3Id) && Valid: {issue_Vj = CDB3Val; issue_Qj = 0;}
            else: {
                issue_Qj = Qj;
                issue_Vj = Vj;
            }
        }
        any {
            CDB0 && (Qk == CDB0Id) && Valid: {issue_Vk = CDB0Val; issue_Qk = 0;}
            CDB1 && (Qk == CDB1Id) && Valid: {issue_Vk = CDB1Val; issue_Qk = 0;}
            CDB2 && (Qk == CDB2Id) && Valid: {issue_Vk = CDB2Val; issue_Qk = 0;}
            CDB3 && (Qk == CDB3Id) && Valid: {issue_Vk = CDB3Val; issue_Qk = 0;}
            else: {
                issue_Qk = Qk;
                issue_Vk = Vk;
            }
        }
        if(!flush) {
            generate(i_ = 0; i_ < NUMBER_OF_RS; i_++) {
                if(i_ == 0) {
                    if(!isBusyArray[0]) rs[0].issue(Valid, Op, issue_Vj, issue_Vk, issue_Qj, issue_Qk, Dest, A);
                } else if(i_ == 1) {
                    if(!isBusyArray[1] && isBusyArray[0]) rs[1].issue(Valid, Op, issue_Vj, issue_Vk, issue_Qj, issue_Qk, Dest, A);
                } else {
                    if(!isBusyArray[i_] && &isBusyArray[i_-1:0]) rs[i_].issue(Valid, Op, issue_Vj, issue_Vk, issue_Qj, issue_Qk, Dest, A);
                }
            }
        }
    }
    if(!flush && !stall) {
        generate(i_ = 0; i_ < NUMBER_OF_RS; i_++) {
            if(i_ == 0) {
                if(isDispatchableArray[0]) {
                    dispatch_entry = rs[0].dispatch();
                    dispatch(dispatch_entry.Op, dispatch_entry.Dest, dispatch_entry.Vj, dispatch_entry.Vk, dispatch_entry.A);
                }
            } else if(i_ == 1) {
                if(isDispatchableArray[1] && !isDispatchableArray[0]) {
                    dispatch_entry = rs[1].dispatch();
                    dispatch(dispatch_entry.Op, dispatch_entry.Dest, dispatch_entry.Vj, dispatch_entry.Vk, dispatch_entry.A);
                }
            } else {
                if(isDispatchableArray[i_] && !|isDispatchableArray[i_-1:0]) {
                    dispatch_entry = rs[i_].dispatch();
                    dispatch(dispatch_entry.Op, dispatch_entry.Dest, dispatch_entry.Vj, dispatch_entry.Vk, dispatch_entry.A);
                }
            }
        }
    }
    func flush {
        generate(i_ = 0; i_ < NUMBER_OF_RS; i_++) {
            rs[i_].flush();
        }
    }
    func CDB0 {
        if(!flush) {
            generate(i_ = 0; i_ < NUMBER_OF_RS; i_++) {
                rs[i_].CDB0(CDB0Id, CDB0Val);
            }
        }
    }
    func CDB1 {
        if(!flush) {
            generate(i_ = 0; i_ < NUMBER_OF_RS; i_++) {
                rs[i_].CDB1(CDB1Id, CDB1Val);
            }
        }
    }
    func CDB2 {
        if(!flush) {
            generate(i_ = 0; i_ < NUMBER_OF_RS; i_++) {
                rs[i_].CDB2(CDB2Id, CDB2Val);
            }
        }
    }
    func CDB3 {
        if(!flush) {
            generate(i_ = 0; i_ < NUMBER_OF_RS; i_++) {
                rs[i_].CDB3(CDB3Id, CDB3Val);
            }
        }
    }
    if(!flush) {
        if(&isBusyArray[NUMBER_OF_RS-1:0]) {
            full();
        }
    }
}
