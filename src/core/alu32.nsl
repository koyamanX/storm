#include "alu32.h"

module alu32 {
    wire eq;
    wire lt;
    wire ltu;

    func exe {
        eq = a == b;
        lt = (33#(a) - 33#(b))[32];
        ltu = (33'(a) - 33'(b))[32];

        any {
            fn == ALU_ADD: {
                return a + b;
            }
            fn == ALU_SUB: {
                return a - b;
            }
            fn == ALU_SLL: {
                return (a << b[4:0]);
            }
            fn == ALU_SLT: {
                return 32'(lt);
            }
            fn == ALU_SLTU: {
                return 32'(ltu);
            }
            fn == ALU_XOR: {
                return a ^ b;
            }
            fn == ALU_SRL: {
                return (a >> b[4:0]);
            }
            fn == ALU_SRA: {
                return (64#(a) >> b[4:0]);
            }
            fn == ALU_OR: {
                return a | b;
            }
            fn == ALU_AND: {
                return a & b;
            }
            fn == ALU_NAAND: {
                return ~a & b;
            }
            fn == BRU_EQ: {
                return 32'(eq);
            }
            fn == BRU_NE: {
                return 32'(!eq);
            }
            fn == BRU_LT: {
                return 32'(lt);
            }
            fn == BRU_LTU: {
                return 32'(ltu);
            }
            fn == BRU_GE: {
                return 32'(!lt);
            }
            fn == BRU_GEU: {
                return 32'(!ltu);
            }
            fn == BRU_JALR: {
                return 32'(1'b1);
            }
            fn == BRU_JAL: {
                return 32'(1'b1);
            }
        }
    }
}
