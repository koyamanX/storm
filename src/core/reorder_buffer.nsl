#include "reorder_buffer.h"

module reorder_buffer {
	/* TODO: increase number of entries, for ease of debugging
		we currently use 4 entires, however, reservation station
		has larger set of entires, so reorder buffer must also have
		much larger size.
	*/
	reorder_buffer_t reg rob0 = 0;
	reorder_buffer_t reg rob1 = 0;
	reorder_buffer_t reg rob2 = 0;
	reorder_buffer_t reg rob3 = 0;
	reg tail[LOG2_ROB_NUM_OF_ENTRIES+1] = 0;
	reg head[LOG2_ROB_NUM_OF_ENTRIES+1] = 0;
	wire next_tail[LOG2_ROB_NUM_OF_ENTRIES+1];
	wire next_head[LOG2_ROB_NUM_OF_ENTRIES+1];
	reorder_buffer_t wire commit_entry;
	integer i_;

	next_tail = tail + 1;
	next_head = head + 1;
	func issue {
		if(!flush) {
			reorder_buffer_t wire new_entry;

			new_entry.Valid0 = valid0;
			new_entry.Busy0 = valid0;
			new_entry.PC0 = pc0;
			new_entry.Inst0 = inst0;
			new_entry.Dest0 = dest0;
			new_entry.Value0 = 0;
			new_entry.Op0 = op0;
			new_entry.Target0 = 0;
			new_entry.Valid1 = valid1;
			new_entry.Busy1 = valid1;
			new_entry.PC1 = pc1;
			new_entry.Inst1 = inst1;
			new_entry.Dest1 = dest1;
			new_entry.Value1 = 0;
			new_entry.Op1 = op1;
			new_entry.Target1 = 0;

			any {
				tail[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 0: rob0 := new_entry;
				tail[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 1: rob1 := new_entry;
				tail[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 2: rob2 := new_entry;
				tail[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 3: rob3 := new_entry;
			}
			any {
				tail[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 0: return 1;
				tail[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 1: return 3;
				tail[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 2: return 5;
				tail[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 3: return 7;
			}
			tail := next_tail;
		}
	}
	func flush {
		rob0 := 0;
		rob1 := 0;
		rob2 := 0;
		rob3 := 0;
		head := 0;
		tail := 0;
	}
	func read_operandA {
		if(!flush) {
			any {
				read_operandA_id == 1: {read_operandA_val = rob0.Value0; return rob0.Busy0;}
				read_operandA_id == 2: {read_operandA_val = rob0.Value1; return rob0.Busy1;}
				read_operandA_id == 3: {read_operandA_val = rob1.Value0; return rob1.Busy0;}
				read_operandA_id == 4: {read_operandA_val = rob1.Value1; return rob1.Busy1;}
				read_operandA_id == 5: {read_operandA_val = rob2.Value0; return rob2.Busy0;}
				read_operandA_id == 6: {read_operandA_val = rob2.Value1; return rob2.Busy1;}
				read_operandA_id == 7: {read_operandA_val = rob3.Value0; return rob3.Busy0;}
				read_operandA_id == 8: {read_operandA_val = rob3.Value1; return rob3.Busy1;}
			}
		}
	}
	func read_operandB {
		if(!flush) {
			any {
				read_operandB_id == 1: {read_operandB_val = rob0.Value0; return rob0.Busy0;}
				read_operandB_id == 2: {read_operandB_val = rob0.Value1; return rob0.Busy1;}
				read_operandB_id == 3: {read_operandB_val = rob1.Value0; return rob1.Busy0;}
				read_operandB_id == 4: {read_operandB_val = rob1.Value1; return rob1.Busy1;}
				read_operandB_id == 5: {read_operandB_val = rob2.Value0; return rob2.Busy0;}
				read_operandB_id == 6: {read_operandB_val = rob2.Value1; return rob2.Busy1;}
				read_operandB_id == 7: {read_operandB_val = rob3.Value0; return rob3.Busy0;}
				read_operandB_id == 8: {read_operandB_val = rob3.Value1; return rob3.Busy1;}
			}
		}
	}
	func read_operandC {
		if(!flush) {
			any {
				read_operandC_id == 1: {read_operandC_val = rob0.Value0; return rob0.Busy0;}
				read_operandC_id == 2: {read_operandC_val = rob0.Value1; return rob0.Busy1;}
				read_operandC_id == 3: {read_operandC_val = rob1.Value0; return rob1.Busy0;}
				read_operandC_id == 4: {read_operandC_val = rob1.Value1; return rob1.Busy1;}
				read_operandC_id == 5: {read_operandC_val = rob2.Value0; return rob2.Busy0;}
				read_operandC_id == 6: {read_operandC_val = rob2.Value1; return rob2.Busy1;}
				read_operandC_id == 7: {read_operandC_val = rob3.Value0; return rob3.Busy0;}
				read_operandC_id == 8: {read_operandC_val = rob3.Value1; return rob3.Busy1;}
			}
		}
	}
	func read_operandD {
		if(!flush) {
			any {
				read_operandD_id == 1: {read_operandD_val = rob0.Value0; return rob0.Busy0;}
				read_operandD_id == 2: {read_operandD_val = rob0.Value1; return rob0.Busy1;}
				read_operandD_id == 3: {read_operandD_val = rob1.Value0; return rob1.Busy0;}
				read_operandD_id == 4: {read_operandD_val = rob1.Value1; return rob1.Busy1;}
				read_operandD_id == 5: {read_operandD_val = rob2.Value0; return rob2.Busy0;}
				read_operandD_id == 6: {read_operandD_val = rob2.Value1; return rob2.Busy1;}
				read_operandD_id == 7: {read_operandD_val = rob3.Value0; return rob3.Busy0;}
				read_operandD_id == 8: {read_operandD_val = rob3.Value1; return rob3.Busy1;}
			}
		}
	}
	func CDB0 {
		if(!flush) {
			any {
				CDB0Id == 1: {rob0.Value0 := CDB0Val; rob0.Busy0 := 0;}
				CDB0Id == 2: {rob0.Value1 := CDB0Val; rob0.Busy1 := 0;}
				CDB0Id == 3: {rob1.Value0 := CDB0Val; rob1.Busy0 := 0;}
				CDB0Id == 4: {rob1.Value1 := CDB0Val; rob1.Busy1 := 0;}
				CDB0Id == 5: {rob2.Value0 := CDB0Val; rob2.Busy0 := 0;}
				CDB0Id == 6: {rob2.Value1 := CDB0Val; rob2.Busy1 := 0;}
				CDB0Id == 7: {rob3.Value0 := CDB0Val; rob3.Busy0 := 0;}
				CDB0Id == 8: {rob3.Value1 := CDB0Val; rob3.Busy1 := 0;}
			}
		}
	}
	func CDB1 {
		if(!flush) {
			any {
				CDB1Id == 1: {rob0.Value0 := CDB1Val; rob0.Busy0 := 0;}
				CDB1Id == 2: {rob0.Value1 := CDB1Val; rob0.Busy1 := 0;}
				CDB1Id == 3: {rob1.Value0 := CDB1Val; rob1.Busy0 := 0;}
				CDB1Id == 4: {rob1.Value1 := CDB1Val; rob1.Busy1 := 0;}
				CDB1Id == 5: {rob2.Value0 := CDB1Val; rob2.Busy0 := 0;}
				CDB1Id == 6: {rob2.Value1 := CDB1Val; rob2.Busy1 := 0;}
				CDB1Id == 7: {rob3.Value0 := CDB1Val; rob3.Busy0 := 0;}
				CDB1Id == 8: {rob3.Value1 := CDB1Val; rob3.Busy1 := 0;}
			}
		}
	}
	func CDB2 {
		if(!flush) {
			any {
				CDB2Id == 1: {rob0.Value0 := CDB2Val; rob0.Target0 := CDB2Target; rob0.Busy0 := 0;}
				CDB2Id == 2: {rob0.Value1 := CDB2Val; rob0.Target1 := CDB2Target; rob0.Busy1 := 0;}
				CDB2Id == 3: {rob1.Value0 := CDB2Val; rob1.Target0 := CDB2Target; rob1.Busy0 := 0;}
				CDB2Id == 4: {rob1.Value1 := CDB2Val; rob1.Target1 := CDB2Target; rob1.Busy1 := 0;}
				CDB2Id == 5: {rob2.Value0 := CDB2Val; rob2.Target0 := CDB2Target; rob2.Busy0 := 0;}
				CDB2Id == 6: {rob2.Value1 := CDB2Val; rob2.Target1 := CDB2Target; rob2.Busy1 := 0;}
				CDB2Id == 7: {rob3.Value0 := CDB2Val; rob3.Target0 := CDB2Target; rob3.Busy0 := 0;}
				CDB2Id == 8: {rob3.Value1 := CDB2Val; rob3.Target1 := CDB2Target; rob3.Busy1 := 0;}
			}
		}
	}
	func CDB3 {
		if(!flush) {
			any {
				CDB3Id == 1: {rob0.Value0 := CDB3Val; rob0.Busy0 := 0;}
				CDB3Id == 2: {rob0.Value1 := CDB3Val; rob0.Busy1 := 0;}
				CDB3Id == 3: {rob1.Value0 := CDB3Val; rob1.Busy0 := 0;}
				CDB3Id == 4: {rob1.Value1 := CDB3Val; rob1.Busy1 := 0;}
				CDB3Id == 5: {rob2.Value0 := CDB3Val; rob2.Busy0 := 0;}
				CDB3Id == 6: {rob2.Value1 := CDB3Val; rob2.Busy1 := 0;}
				CDB3Id == 7: {rob3.Value0 := CDB3Val; rob3.Busy0 := 0;}
				CDB3Id == 8: {rob3.Value1 := CDB3Val; rob3.Busy1 := 0;}
			}
		}
	}
	any {
		head[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 0: commit_entry = rob0;
		head[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 1: commit_entry = rob1;
		head[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 2: commit_entry = rob2;
		head[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 3: commit_entry = rob3;
	}
	if(!commit_stall && (commit_entry.Valid0 || commit_entry.Valid1) && !commit_entry.Busy0 && !commit_entry.Busy1) {
		if(!flush) {
			// TODO:
			any {
				head[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 0: rob0 := 0;
				head[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 1: rob1 := 0;
				head[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 2: rob2 := 0;
				head[LOG2_ROB_NUM_OF_ENTRIES-1:0] == 3: rob3 := 0;
			}
			head := next_head;
		}
		any {
			commit_entry.Valid0 && commit_entry.Valid1: {
				commit(
					commit_entry.Dest0, commit_entry.Value0, commit_entry.Op0, commit_entry.PC0, commit_entry.Target0,
					commit_entry.Dest1, commit_entry.Value1, commit_entry.Op1, commit_entry.PC1, commit_entry.Target1
				);
			}
			!commit_entry.Valid0 && commit_entry.Valid1: {
				commit(
					0, 0, 0, 0, 0,
					commit_entry.Dest1, commit_entry.Value1, commit_entry.Op1, commit_entry.PC1, commit_entry.Target1
				);
			}
			commit_entry.Valid0 && !commit_entry.Valid1: {
				commit(
					commit_entry.Dest0, commit_entry.Value0, commit_entry.Op0, commit_entry.PC0, commit_entry.Target0,
					0, 0, 0, 0, 0
				);
			}
		}
	}
	if(!flush) {
		if((tail[LOG2_ROB_NUM_OF_ENTRIES-1:0] == head[LOG2_ROB_NUM_OF_ENTRIES-1:0]) && (tail[LOG2_ROB_NUM_OF_ENTRIES] != head[LOG2_ROB_NUM_OF_ENTRIES])) {
			full();
		}
	}
}
