#include "active_list.h"

module active_list {
	mem activelist[NUMBER_OF_ACTIVE_LIST][SIZEOF_ACTIVE_LIST_T] = {0};	
	reg tail[LOG2_ACTIVE_LIST_NUM_OF_ENTRIES+1] = 0;
	reg head[LOG2_ACTIVE_LIST_NUM_OF_ENTRIES+1] = 0;
	wire next_head[LOG2_ACTIVE_LIST_NUM_OF_ENTRIES+1];
	wire next_tail[LOG2_ACTIVE_LIST_NUM_OF_ENTRIES+1];
	active_list_t wire head_entry;
	
	next_tail = tail + 1;
	next_head = head + 1;
	func issue {
		if(!flush) {
			activelist[tail] := new_entry;
			tail := next_tail;
		}
	}
	head_entry = activelist[tail];
	if((head_entry.valid0 || head_entry.valid1) && (head_entry.retired0 && head_entry.retired1)) {
		commitable();
	}
	func commit {
		head := next_head;
		return head_entry;
	}
    if(!flush) {
        if((tail[LOG2_ACTIVE_LIST_NUM_OF_ENTRIES-1:0] == head[LOG2_ACTIVE_LIST_NUM_OF_ENTRIES-1:0])
            && (tail[LOG2_ACTIVE_LIST_NUM_OF_ENTRIES] != head[LOG2_ACTIVE_LIST_NUM_OF_ENTRIES])) {
            full();
        }
    }
	func flush {
		head := 0;
		tail := 0;
		//TODO:
		activelist[0] := 0;
	}
}
