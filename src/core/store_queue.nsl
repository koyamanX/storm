#include "store_queue.h"

module store_queue {
	store_queue_t reg stq0 = 0;
	store_queue_t reg stq1 = 0;
	store_queue_t reg stq2 = 0;
	store_queue_t reg stq3 = 0;

	func push {
		store_queue_t wire new_entry;

		if(!flush) {
			new_entry.Valid = 1;
			new_entry.A = A;
			new_entry.Qj = Qj;
			new_entry.Vj = Vj;
			new_entry.RobId = RobId;

			alt {
				stq0.Valid: {stq0 := new_entry;}
				stq1.Valid: {stq1 := new_entry;}
				stq2.Valid: {stq2 := new_entry;}
				stq3.Valid: {stq3 := new_entry;}
			}
		}
	}
	if(!flush && stq0.Valid && stq1.Valid && stq2.Valid && stq3.Valid) {
		full();
	}
	func flush {
		stq0 := 0;
		stq1 := 0;
		stq2 := 0;
		stq3 := 0;
	}
	func CDB0 {
		if(!flush) {
			any {
				(stq0.Qj == CDB0Id) && stq0.Valid: {stq0.Vj := CDB0Val; stq0.Qj := 0;}
				(stq1.Qj == CDB0Id) && stq1.Valid: {stq1.Vj := CDB0Val; stq1.Qj := 0;}
				(stq2.Qj == CDB0Id) && stq2.Valid: {stq2.Vj := CDB0Val; stq2.Qj := 0;}
				(stq3.Qj == CDB0Id) && stq3.Valid: {stq3.Vj := CDB0Val; stq3.Qj := 0;}
			}
		}
	}
	func CDB1 {
		if(!flush) {
			any {
				(stq0.Qj == CDB1Id) && stq0.Valid: {stq0.Vj := CDB1Val; stq0.Qj := 0;}
				(stq1.Qj == CDB1Id) && stq1.Valid: {stq1.Vj := CDB1Val; stq1.Qj := 0;}
				(stq2.Qj == CDB1Id) && stq2.Valid: {stq2.Vj := CDB1Val; stq2.Qj := 0;}
				(stq3.Qj == CDB1Id) && stq3.Valid: {stq3.Vj := CDB1Val; stq3.Qj := 0;}
			}
		}
	}
	func CDB2 {
		if(!flush) {
			any {
				(stq0.Qj == CDB2Id) && stq0.Valid: {stq0.Vj := CDB2Val; stq0.Qj := 0;}
				(stq1.Qj == CDB2Id) && stq1.Valid: {stq1.Vj := CDB2Val; stq1.Qj := 0;}
				(stq2.Qj == CDB2Id) && stq2.Valid: {stq2.Vj := CDB2Val; stq2.Qj := 0;}
				(stq3.Qj == CDB2Id) && stq3.Valid: {stq3.Vj := CDB2Val; stq3.Qj := 0;}
			}
		}
	}
	func CDB3 {
		if(!flush) {
			any {
				(stq0.Qj == CDB3Id) && stq0.Valid: {stq0.Vj := CDB3Val; stq0.Qj := 0;}
				(stq1.Qj == CDB3Id) && stq1.Valid: {stq1.Vj := CDB3Val; stq1.Qj := 0;}
				(stq2.Qj == CDB3Id) && stq2.Valid: {stq2.Vj := CDB3Val; stq2.Qj := 0;}
				(stq3.Qj == CDB3Id) && stq3.Valid: {stq3.Vj := CDB3Val; stq3.Qj := 0;}
			}
		}
	}
	func commit {
		if(!flush) {
			any {
				(stq0.RobId == commitId) && stq0.Valid && (stq0.Qj == 0): {stq0.Valid := 0;}
				(stq1.RobId == commitId) && stq1.Valid && (stq1.Qj == 0): {stq1.Valid := 0;}
				(stq2.RobId == commitId) && stq2.Valid && (stq2.Qj == 0): {stq2.Valid := 0;}
				(stq3.RobId == commitId) && stq3.Valid && (stq3.Qj == 0): {stq3.Valid := 0;}
			}
		}
	}
}
