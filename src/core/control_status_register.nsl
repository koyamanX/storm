#include "control_status_register.h"
#include "csr.h"

module control_status_register {
	wire is_exist_csr_num[12];
	wire exist;
	func_self is_exist_csr(is_exist_csr_num): exist;
	wire is_readonly_csr_num[12];
	wire readonly;
	func_self is_readonly(is_readonly_csr_num): readonly;
    misa_t reg misa = 0;
    mvendorid_t reg mvendorid = 0;
    marchid_t reg marchid = 0;
    mimpid_t reg mimpid = 0;
    mhartid_t reg mhartid = 0;
    mstatush_t reg mstatush = 0;
    mstatus_t reg mstatus = 0;
    mtvec_t reg mtvec = {0, MTVEC_MODE_DIRECT};
    mip_t reg mip = 0;
    mie_t reg mie = 0;
    mscratch_t reg mscratch = 0;
    mepc_t reg mepc = 0;
    mtval_t reg mtval = 0;
    mcause_t reg mcause = 0;
    csr64_t reg mcycle = 0;
    func_self stop_mcycle();
    csr64_t reg minstret = 0;
    func_self stop_minstret();
    csr64_t reg mtime = 0;
    func_self stop_mtime();
    reg mode[2] = MACHINE;
    csr_write_buffer_t reg wbuf = 0;
    /*
        SXLEN=32
        UXLEN=32
    */

    ialign = IALIGN;
    meip = mip.meip;
    msip = req_software_interrupt_req_hart0;
    mtip = req_timer_interrupt_req_hart0;
    meie = mie.meie;
    msie = mie.msie;
    mtie = mie.mtie;
    mstatus_mie  = mstatus.mie;
    priv_mode = mode;
    func req_reset {
        /* TODO: */
        mode                := MACHINE;
        misa.mxl            := MISA_MXL_XLEN32;
        misa.extensions     := (MISA_EXTENSIONS_I);
        mtvec.mode          := MTVEC_MODE_DIRECT;
        mtvec.base          := 30'b10000_00000_00000_00000_00000_00000;
        mstatus.mie         := 0;
        mstatus.mprv        := 0;
        mstatus.mpp         := MACHINE;
        mstatush.mbe        := 0;   /* Little-endian */
        wbuf                := 0;
    }
	func req_flush {
		wbuf := 0;
	}
    func req_trap {
        mstatus_t wire req_trap_xstatus;
        mtvec_t wire req_trap_xtvec;

        wbuf := 0;
        any {
            (mode == MACHINE): {
                if(req_commit && wbuf.valid && wbuf.ptr == req_commit_ptr && wbuf.addr == MSTATUS) {
                    req_trap_xstatus = wbuf.data;
                } else {
                    req_trap_xstatus = mstatus;
                }
                if(req_commit && wbuf.valid && wbuf.ptr == req_commit_ptr && wbuf.addr == MTVEC) {
                    req_trap_xtvec = wbuf.data;
                } else {
                    req_trap_xtvec = mtvec;
                }
                mstatus.mpie    := req_trap_xstatus.mie;
                mstatus.mie     := 0;
                mstatus.mpp     := MACHINE;
                mode            := MACHINE;
                mcause          := req_trap_cause;
                mepc            := req_trap_pc;
                mtval           := req_trap_val;

                any {
                    (mtvec.mode == MTVEC_MODE_DIRECT): return {req_trap_xtvec.base, 2'b00} & ~IALIGN;
                    (mtvec.mode == MTVEC_MODE_VECTORED) && !req_trap_cause[31]: return {req_trap_xtvec.base, 2'b00} & ~IALIGN;
                    (mtvec.mode == MTVEC_MODE_VECTORED) && req_trap_cause[31]: return {req_trap_xtvec.base, 2'b00} + 32'({req_trap_cause[9:0], 2'b00}) & ~IALIGN;
                }
            }
        }
    }
    func req_mret {
        mstatus_t wire req_mret_mstatus;
        mepc_t wire req_mret_mepc;

        wbuf := 0;
        if(req_commit && wbuf.valid && wbuf.ptr == req_commit_ptr && wbuf.addr == MSTATUS) {
            req_mret_mstatus = wbuf.data;
        } else {
            req_mret_mstatus = mstatus;
        }
        if(req_commit && wbuf.valid && wbuf.ptr == req_commit_ptr && wbuf.addr == MEPC) {
            req_mret_mepc = wbuf.data;
        } else {
            req_mret_mepc = mepc;
        }

        mstatus.mie     := req_mret_mstatus.mpie;
        mstatus.mpie    := 1;
        mstatus.mpp     := MACHINE;
        mstatus.mprv    := 0;
        mode            := req_mret_mstatus.mpp;

        return req_mret_mepc & ~IALIGN;
    }
	func is_exist_csr {
		any {
            (mode >= MACHINE) && (is_exist_csr_num == MISA): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MVENDORID): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MARCHID): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MIMPID): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MHARTID): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MSTATUSH): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MSTATUS): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MTVEC): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MIP): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MIE): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MSCRATCH): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MEPC): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MCAUSE): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MTVAL): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MCYCLEH): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MCYCLE): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MINSTRETH): return 1;
            (mode >= MACHINE) && (is_exist_csr_num == MINSTRET): return 1;
            (mode >= USER) && (is_exist_csr_num == CYCLEH): return 1;
            (mode >= USER) && (is_exist_csr_num == CYCLE): return 1;
            (mode >= USER) && (is_exist_csr_num == INSTRETH): return 1;
            (mode >= USER) && (is_exist_csr_num == INSTRET): return 1;
            (mode >= USER) && (is_exist_csr_num == TIMEH): return 1;
            (mode >= USER) && (is_exist_csr_num == TIME): return 1;
			else: return 0;
        }
	}
	func is_readonly {
		if(is_readonly_csr_num[11:10] == 2'b11) {
			return 1;
		} else {
			return 0;
		}
	}
	func req_decode {
		is_readonly(req_decode_csr_num);
		is_exist_csr(req_decode_csr_num);
		any {
			req_decode_csr_rw == DECODE_CSR_RW && (readonly || !exist): return 1;
			req_decode_csr_rw == DECODE_CSR_WO && (readonly || !exist): return 1;
			req_decode_csr_rw == DECODE_CSR_RO && !exist: return 1;
			else: return 0;
		}
	}
    func req_read {
        any {
            (mode >= MACHINE) && (req_read_csr_num == MISA): {
                return misa;
            }
            (mode >= MACHINE) && (req_read_csr_num == MVENDORID): {
                return mvendorid;
            }
            (mode >= MACHINE) && (req_read_csr_num == MARCHID): {
                return marchid;
            }
            (mode >= MACHINE) && (req_read_csr_num == MIMPID): {
                return mimpid;
            }
            (mode >= MACHINE) && (req_read_csr_num == MHARTID): {
                return mhartid;
            }
            (mode >= MACHINE) && (req_read_csr_num == MSTATUSH): {
                return mstatush;
            }
            (mode >= MACHINE) && (req_read_csr_num == MSTATUS): {
                return mstatus;
            }
            (mode >= MACHINE) && (req_read_csr_num == MTVEC): {
                return mtvec;
            }
            (mode >= MACHINE) && (req_read_csr_num == MIP): {
                return mip | (req_timer_interrupt_req_hart0 << 7) | (req_software_interrupt_req_hart0 << 3);
            }
            (mode >= MACHINE) && (req_read_csr_num == MIE): {
                return mie;
            }
            (mode >= MACHINE) && (req_read_csr_num == MSCRATCH): {
                return mscratch;
            }
            (mode >= MACHINE) && (req_read_csr_num == MEPC): {
                return mepc & ~IALIGN;
            }
            (mode >= MACHINE) && (req_read_csr_num == MCAUSE): {
                return mcause;
            }
            (mode >= MACHINE) && (req_read_csr_num == MTVAL): {
                return mtval;
            }
            (mode >= MACHINE) && (req_read_csr_num == MCYCLEH): {
                return mcycle.hi;
            }
            (mode >= MACHINE) && (req_read_csr_num == MCYCLE): {
                return mcycle.lo;
            }
            (mode >= MACHINE) && (req_read_csr_num == MINSTRETH): {
                return minstret.hi;
            }
            (mode >= MACHINE) && (req_read_csr_num == MINSTRET): {
                return minstret.lo;
            }
            (mode >= USER) && (req_read_csr_num == CYCLEH): {
                return mcycle.hi;
            }
            (mode >= USER) && (req_read_csr_num == CYCLE): {
                return mcycle.lo;
            }
            (mode >= USER) && (req_read_csr_num == INSTRETH): {
                return minstret.hi;
            }
            (mode >= USER) && (req_read_csr_num == INSTRET): {
                return minstret.lo;
            }
            (mode >= USER) && (req_read_csr_num == TIMEH): {
                return mtime.hi;
            }
            (mode >= USER) && (req_read_csr_num == TIME): {
                return mtime.lo;
            }
        }
    }
    func req_write {
        wire req_write_wbuf_age[REORDER_BUFFER_PTR_SIZE+1];
        wire req_write_age[REORDER_BUFFER_PTR_SIZE+1];

        req_write_wbuf_age = PTR2AGE(wbuf.ptr, req_write_rob_head_ptr);
        req_write_age = PTR2AGE(req_write_ptr, req_write_rob_head_ptr);
        if(~wbuf.valid) {
            wbuf.valid := 1;
            wbuf.addr := req_write_addr;
            wbuf.data := req_write_data;
            wbuf.ptr := req_write_ptr;
        } else if(wbuf.valid && req_write_wbuf_age > req_write_age) {
            wbuf.valid := 1;
            wbuf.addr := req_write_addr;
            wbuf.data := req_write_data;
            wbuf.ptr := req_write_ptr;
        }
        any {
                (mode >= MACHINE) && (req_write_addr == MISA): return misa;
                (mode >= MACHINE) && (req_write_addr == MVENDORID): return mvendorid;
                (mode >= MACHINE) && (req_write_addr == MARCHID): return marchid;
                (mode >= MACHINE) && (req_write_addr == MIMPID): return mimpid;
                (mode >= MACHINE) && (req_write_addr == MHARTID): return mhartid;
                (mode >= MACHINE) && (req_write_addr == MSTATUSH): return mstatush;
                (mode >= MACHINE) && (req_write_addr == MSTATUS): return mstatus;
                (mode >= MACHINE) && (req_write_addr == MTVEC): return mtvec;
                (mode >= MACHINE) && (req_write_addr == MIP): return mip;
                (mode >= MACHINE) && (req_write_addr == MIE): return mie;
                (mode >= MACHINE) && (req_write_addr == MSCRATCH): return mscratch;
                (mode >= MACHINE) && (req_write_addr == MEPC): return mepc;
                (mode >= MACHINE) && (req_write_addr == MCAUSE): return mcause;
                (mode >= MACHINE) && (req_write_addr == MTVAL): return mtval;
                (mode >= MACHINE) && (req_write_addr == MCYCLEH): return mcycle.hi;
                (mode >= MACHINE) && (req_write_addr == MCYCLE): return mcycle.lo;
                (mode >= MACHINE) && (req_write_addr == MINSTRETH): return minstret.hi;
                (mode >= MACHINE) && (req_write_addr == MINSTRET): return minstret.lo;
        }
    }
    func req_commit {
        mstatus_t wire req_commit_xstatus;
        mtvec_t wire req_commit_xtvec;
        mie_t wire req_commit_xie;

        if(wbuf.valid && wbuf.ptr == req_commit_ptr) {
            wbuf.valid := 0;
            any {
                (mode >= MACHINE) && (wbuf.addr == MISA): {
                    // nop
                }
                (mode >= MACHINE) && (wbuf.addr == MVENDORID): {
                    // nop
                }
                (mode >= MACHINE) && (wbuf.addr == MARCHID): {
                    // nop
                }
                (mode >= MACHINE) && (wbuf.addr == MIMPID): {
                    // nop
                }
                (mode >= MACHINE) && (wbuf.addr == MHARTID): {
                    // nop
                }
                (mode >= MACHINE) && (wbuf.addr == MSTATUSH): {
                    /*
                        MBE is always 0
                        SBE is always 0
                    */
                }
                (mode >= MACHINE) && (wbuf.addr == MSTATUS): {
                    req_commit_xstatus = wbuf.data;
                    /*
                        UBE is always 0
                        TVM is always 0
                        TW is always 0
                        TSR is always 0
                        SPIE is always 0
                        SIE is always 0
                        MPP takes MACHINE
                        SPP is always 0
                        MPRV is always 0
                        MXR is always 0
                        SUM is always 0
                        FS is always 0
                        XS is always 0
                        VS is always 0
                        SD is always 0
                    */
                    mstatus.mie     := req_commit_xstatus.mie;
                    mstatus.mpie    := req_commit_xstatus.mpie;
                    mstatus.mpp     := MACHINE;
                }
                (mode >= MACHINE) && (wbuf.addr == MTVEC): {
                    req_commit_xtvec = wbuf.data;

                    mtvec.base := req_commit_xtvec.base;
                    any {
                        req_commit_xtvec.mode == MTVEC_MODE_DIRECT: mtvec.mode := req_commit_xtvec.mode;
                        req_commit_xtvec.mode == MTVEC_MODE_VECTORED: mtvec.mode := req_commit_xtvec.mode;
                    }
                }
                (mode >= MACHINE) && (wbuf.addr == MIP): {
                    /*
                        read-only and written through memory-mapped interrupt controller.
                        - MEIP
                        - MTIP
                        - MSIP

                        always 0
                        - SEIP
                        - STIP
                        - SSIP
                    */
                }
                (mode >= MACHINE) && (wbuf.addr == MIE): {
                    req_commit_xie = wbuf.data;
                    mie.meie := req_commit_xie.meie;
                    mie.mtie := req_commit_xie.mtie;
                    mie.msie := req_commit_xie.msie;
                    /*
                        always 0
                        - SEIP
                        - STIP
                        - SSIP
                    */
                }
                (mode >= MACHINE) && (wbuf.addr == MSCRATCH): {
                    mscratch := wbuf.data;
                }
                (mode >= MACHINE) && (wbuf.addr == MEPC): {
                    mepc := wbuf.data;
                }
                (mode >= MACHINE) && (wbuf.addr == MCAUSE): {
                    mcause := wbuf.data;
                }
                (mode >= MACHINE) && (wbuf.addr == MTVAL): {
                    mtval := wbuf.data;
                }
                (mode >= MACHINE) && (wbuf.addr == MCYCLEH): {
                    mcycle.hi := wbuf.data;
                    stop_mcycle();
                }
                (mode >= MACHINE) && (wbuf.addr == MCYCLE): {
                    mcycle.lo := wbuf.data;
                    stop_mcycle();
                }
                (mode >= MACHINE) && (wbuf.addr == MINSTRETH): {
                    minstret.hi := wbuf.data;
                    stop_minstret();
                }
                (mode >= MACHINE) && (wbuf.addr == MINSTRET): {
                    minstret.lo := wbuf.data;
                    stop_minstret();
                }
            }
        }
    }
    func req_update_instret {
        if(!stop_minstret) {
            minstret := minstret + 2;
        }
    }
    if(!stop_mcycle) {
        mcycle++;
    }
    mtime++;
}
