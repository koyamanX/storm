#include "reservation_station_in_order_2way.h"

module reservation_station_in_order_2way {
	reservation_station_2way_t reg rs0 = 0;
	reservation_station_2way_t reg rs1 = 0;
	reservation_station_2way_t reg rs2 = 0;
	reservation_station_2way_t reg rs3 = 0;
	reg tail[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES+1] = 0;
	reg head[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES+1] = 0;
	wire next_tail[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES+1];
	wire next_head[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES+1];
	reservation_station_2way_t wire dispatch_entry;
	reservation_station_2way_t wire new_entry;

	next_tail = tail + 1;
	next_head = head + 1;

	if(issue0 && !flush) {
		new_entry.Busy0 = Valid0;
		new_entry.Op0 = Op0;
		new_entry.Vj0 = Vj0;
		new_entry.Vk0 = Vk0;
		new_entry.Qj0 = Qj0;
		new_entry.Qk0 = Qk0;
		new_entry.Dest0 = Dest0;
		new_entry.A0 = A0;
	} else {
		new_entry.Busy0 = 0;
		new_entry.Op0 = 0;
		new_entry.Vj0 = 0;
		new_entry.Vk0 = 0;
		new_entry.Qj0 = 0;
		new_entry.Qk0 = 0;
		new_entry.Dest0 = 0;
		new_entry.A0 = 0;

	}
	if(issue1 && !flush) {
		new_entry.Busy1 = Valid1;
		new_entry.Op1 = Op1;
		new_entry.Vj1 = Vj1;
		new_entry.Vk1 = Vk1;
		new_entry.Qj1 = Qj1;
		new_entry.Qk1 = Qk1;
		new_entry.Dest1 = Dest1;
		new_entry.A1 = A1;
	} else {
		new_entry.Busy1 = 0;
		new_entry.Op1 = 0;
		new_entry.Vj1 = 0;
		new_entry.Vk1 = 0;
		new_entry.Qj1 = 0;
		new_entry.Qk1 = 0;
		new_entry.Dest1 = 0;
		new_entry.A1 = 0;
	}
	if(issue0 || issue1) {
		any {
			tail[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES-1:0] == 0: rs0 := new_entry;
			tail[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES-1:0] == 1: rs1 := new_entry;
			tail[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES-1:0] == 2: rs2 := new_entry;
			tail[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES-1:0] == 3: rs3 := new_entry;
		}
		tail := next_tail;
	}
	func flush {
		rs0 := 0;
		rs1 := 0;
		rs2 := 0;
		rs3 := 0;
		head := 0;
		tail := 0;
	}
	func CDB0 {
		if(!flush) {
			any {
				(rs3.Qj0 == CDB0Id) && rs3.Busy0: {rs3.Vj0 := CDB0Val; rs3.Qj0 := 0;}
				(rs3.Qk0 == CDB0Id) && rs3.Busy0: {rs3.Vk0 := CDB0Val; rs3.Qk0 := 0;}
				(rs2.Qj0 == CDB0Id) && rs2.Busy0: {rs2.Vj0 := CDB0Val; rs2.Qj0 := 0;}
				(rs2.Qk0 == CDB0Id) && rs2.Busy0: {rs2.Vk0 := CDB0Val; rs2.Qk0 := 0;}
				(rs1.Qj0 == CDB0Id) && rs1.Busy0: {rs1.Vj0 := CDB0Val; rs1.Qj0 := 0;}
				(rs1.Qk0 == CDB0Id) && rs1.Busy0: {rs1.Vk0 := CDB0Val; rs1.Qk0 := 0;}
				(rs0.Qj0 == CDB0Id) && rs0.Busy0: {rs0.Vj0 := CDB0Val; rs0.Qj0 := 0;}
				(rs0.Qk0 == CDB0Id) && rs0.Busy0: {rs0.Vk0 := CDB0Val; rs0.Qk0 := 0;}
				(rs3.Qj1 == CDB0Id) && rs3.Busy1: {rs3.Vj1 := CDB0Val; rs3.Qj1 := 0;}
				(rs3.Qk1 == CDB0Id) && rs3.Busy1: {rs3.Vk1 := CDB0Val; rs3.Qk1 := 0;}
				(rs2.Qj1 == CDB0Id) && rs2.Busy1: {rs2.Vj1 := CDB0Val; rs2.Qj1 := 0;}
				(rs2.Qk1 == CDB0Id) && rs2.Busy1: {rs2.Vk1 := CDB0Val; rs2.Qk1 := 0;}
				(rs1.Qj1 == CDB0Id) && rs1.Busy1: {rs1.Vj1 := CDB0Val; rs1.Qj1 := 0;}
				(rs1.Qk1 == CDB0Id) && rs1.Busy1: {rs1.Vk1 := CDB0Val; rs1.Qk1 := 0;}
				(rs0.Qj1 == CDB0Id) && rs0.Busy1: {rs0.Vj1 := CDB0Val; rs0.Qj1 := 0;}
				(rs0.Qk1 == CDB0Id) && rs0.Busy1: {rs0.Vk1 := CDB0Val; rs0.Qk1 := 0;}
			}
		}
	}
	func CDB1 {
		if(!flush) {
			any {
				(rs3.Qj0 == CDB1Id) && rs3.Busy0: {rs3.Vj0 := CDB1Val; rs3.Qj0 := 0;}
				(rs3.Qk0 == CDB1Id) && rs3.Busy0: {rs3.Vk0 := CDB1Val; rs3.Qk0 := 0;}
				(rs2.Qj0 == CDB1Id) && rs2.Busy0: {rs2.Vj0 := CDB1Val; rs2.Qj0 := 0;}
				(rs2.Qk0 == CDB1Id) && rs2.Busy0: {rs2.Vk0 := CDB1Val; rs2.Qk0 := 0;}
				(rs1.Qj0 == CDB1Id) && rs1.Busy0: {rs1.Vj0 := CDB1Val; rs1.Qj0 := 0;}
				(rs1.Qk0 == CDB1Id) && rs1.Busy0: {rs1.Vk0 := CDB1Val; rs1.Qk0 := 0;}
				(rs0.Qj0 == CDB1Id) && rs0.Busy0: {rs0.Vj0 := CDB1Val; rs0.Qj0 := 0;}
				(rs0.Qk0 == CDB1Id) && rs0.Busy0: {rs0.Vk0 := CDB1Val; rs0.Qk0 := 0;}
				(rs3.Qj1 == CDB1Id) && rs3.Busy1: {rs3.Vj1 := CDB1Val; rs3.Qj1 := 0;}
				(rs3.Qk1 == CDB1Id) && rs3.Busy1: {rs3.Vk1 := CDB1Val; rs3.Qk1 := 0;}
				(rs2.Qj1 == CDB1Id) && rs2.Busy1: {rs2.Vj1 := CDB1Val; rs2.Qj1 := 0;}
				(rs2.Qk1 == CDB1Id) && rs2.Busy1: {rs2.Vk1 := CDB1Val; rs2.Qk1 := 0;}
				(rs1.Qj1 == CDB1Id) && rs1.Busy1: {rs1.Vj1 := CDB1Val; rs1.Qj1 := 0;}
				(rs1.Qk1 == CDB1Id) && rs1.Busy1: {rs1.Vk1 := CDB1Val; rs1.Qk1 := 0;}
				(rs0.Qj1 == CDB1Id) && rs0.Busy1: {rs0.Vj1 := CDB1Val; rs0.Qj1 := 0;}
				(rs0.Qk1 == CDB1Id) && rs0.Busy1: {rs0.Vk1 := CDB1Val; rs0.Qk1 := 0;}
			}
		}
	}
	func CDB2 {
		if(!flush) {
			any {
				(rs3.Qj0 == CDB2Id) && rs3.Busy0: {rs3.Vj0 := CDB2Val; rs3.Qj0 := 0;}
				(rs3.Qk0 == CDB2Id) && rs3.Busy0: {rs3.Vk0 := CDB2Val; rs3.Qk0 := 0;}
				(rs2.Qj0 == CDB2Id) && rs2.Busy0: {rs2.Vj0 := CDB2Val; rs2.Qj0 := 0;}
				(rs2.Qk0 == CDB2Id) && rs2.Busy0: {rs2.Vk0 := CDB2Val; rs2.Qk0 := 0;}
				(rs1.Qj0 == CDB2Id) && rs1.Busy0: {rs1.Vj0 := CDB2Val; rs1.Qj0 := 0;}
				(rs1.Qk0 == CDB2Id) && rs1.Busy0: {rs1.Vk0 := CDB2Val; rs1.Qk0 := 0;}
				(rs0.Qj0 == CDB2Id) && rs0.Busy0: {rs0.Vj0 := CDB2Val; rs0.Qj0 := 0;}
				(rs0.Qk0 == CDB2Id) && rs0.Busy0: {rs0.Vk0 := CDB2Val; rs0.Qk0 := 0;}
				(rs3.Qj1 == CDB2Id) && rs3.Busy1: {rs3.Vj1 := CDB2Val; rs3.Qj1 := 0;}
				(rs3.Qk1 == CDB2Id) && rs3.Busy1: {rs3.Vk1 := CDB2Val; rs3.Qk1 := 0;}
				(rs2.Qj1 == CDB2Id) && rs2.Busy1: {rs2.Vj1 := CDB2Val; rs2.Qj1 := 0;}
				(rs2.Qk1 == CDB2Id) && rs2.Busy1: {rs2.Vk1 := CDB2Val; rs2.Qk1 := 0;}
				(rs1.Qj1 == CDB2Id) && rs1.Busy1: {rs1.Vj1 := CDB2Val; rs1.Qj1 := 0;}
				(rs1.Qk1 == CDB2Id) && rs1.Busy1: {rs1.Vk1 := CDB2Val; rs1.Qk1 := 0;}
				(rs0.Qj1 == CDB2Id) && rs0.Busy1: {rs0.Vj1 := CDB2Val; rs0.Qj1 := 0;}
				(rs0.Qk1 == CDB2Id) && rs0.Busy1: {rs0.Vk1 := CDB2Val; rs0.Qk1 := 0;}
			}
		}
	}
	any {
		head[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES-1:0] == 0: dispatch_entry = rs0;
		head[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES-1:0] == 1: dispatch_entry = rs1;
		head[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES-1:0] == 2: dispatch_entry = rs2;
		head[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES-1:0] == 3: dispatch_entry = rs3;
	}
	if((dispatch_entry.Busy0 || dispatch_entry.Busy1)
		&& ((dispatch_entry.Qj0 == 0) && (dispatch_entry.Qk0 == 0)
		&& (dispatch_entry.Qj1 == 0) && (dispatch_entry.Qk1 == 0))) {
		if(!flush) {
			any {
				dispatch_entry.Busy0: {
					dispatch0(dispatch_entry.Op0, dispatch_entry.Dest0, dispatch_entry.Vj0, dispatch_entry.Vk0, dispatch_entry.A0);
				}
				dispatch_entry.Busy1: {
					dispatch1(dispatch_entry.Op1, dispatch_entry.Dest1, dispatch_entry.Vj1, dispatch_entry.Vk1, dispatch_entry.A1);
				}
			}
			any {
				head[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES-1:0] == 0: rs0 := 0;
				head[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES-1:0] == 1: rs1 := 0;
				head[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES-1:0] == 2: rs2 := 0;
				head[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES-1:0] == 3: rs3 := 0;
			}
			head := next_head;
		}
	}
	if(!flush) {
		if((tail[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES-1:0] == head[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES-1:0])
			&& (tail[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES] != head[LOG2_RS_IN_ORDER_2WAY_NUM_OF_ENTRIES])) {
			full();
		}
	}
}
