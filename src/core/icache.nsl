#include "icache.h"
#include "wishbone_master.h"

module icache {
	mem icache_data_array_way0[128][256];
	mem icache_data_array_way1[128][256];
	mem icache_tag_array_way0[128][20];
	mem icache_tag_array_way1[128][20];
	mem icache_valid_array_way0[128] = {0};
	mem icache_valid_array_way1[128] = {0};
	mem icache_lru_array[128] = {0};
	proc_name idle();
	reg icache_data_way0[256];
	reg icache_data_way1[256];
	reg icache_tag_way0[20];
	reg icache_tag_way1[20];
	reg icache_valid_way0;
	reg icache_valid_way1;
	reg icache_lru;
	proc_name compare_tag(icache_data_way0, icache_tag_way0, icache_valid_way0,
						  icache_data_way1, icache_tag_way1, icache_valid_way1,
						  icache_lru);
	reg allocate_paddr[32];
	reg allocate_way_sel;
	proc_name allocate(allocate_paddr, allocate_way_sel);
	func_self stall();

	func reset {
		idle();
	}

	proc idle {
		wire vidx[12];

		vidx = req_cache_va[11:5];
		any {
			req_cache_read: {
				if(!stall) {
					idle();
					compare_tag(
						icache_data_array_way0[vidx], icache_tag_array_way0[vidx], icache_valid_array_way0[vidx],
						icache_data_array_way1[vidx], icache_tag_array_way1[vidx], icache_valid_array_way1[vidx],
						icache_lru_array[vidx]);
				}
			}
		}
	}
	proc compare_tag {
		wire ptag[20], pidx[7], pwoff[2], pboff[3];

		.{ptag, pidx, pwoff, pboff} = req_cache_pa;

		any {
			icache_tag_way0 == ptag && icache_valid_way0 && pwoff == 0 && req_cache_pa_valid: {rsp_cache_hit(icache_data_way0[63:0]); finish();}
			icache_tag_way0 == ptag && icache_valid_way0 && pwoff == 1 && req_cache_pa_valid: {rsp_cache_hit(icache_data_way0[127:64]); finish();}
			icache_tag_way0 == ptag && icache_valid_way0 && pwoff == 2 && req_cache_pa_valid: {rsp_cache_hit(icache_data_way0[191:128]); finish();}
			icache_tag_way0 == ptag && icache_valid_way0 && pwoff == 3 && req_cache_pa_valid: {rsp_cache_hit(icache_data_way0[255:192]); finish();}
			icache_tag_way1 == ptag && icache_valid_way1 && pwoff == 0 && req_cache_pa_valid: {rsp_cache_hit(icache_data_way1[63:0]); finish();}
			icache_tag_way1 == ptag && icache_valid_way1 && pwoff == 1 && req_cache_pa_valid: {rsp_cache_hit(icache_data_way1[127:64]); finish();}
			icache_tag_way1 == ptag && icache_valid_way1 && pwoff == 2 && req_cache_pa_valid: {rsp_cache_hit(icache_data_way1[191:128]); finish();}
			icache_tag_way1 == ptag && icache_valid_way1 && pwoff == 3 && req_cache_pa_valid: {rsp_cache_hit(icache_data_way1[255:192]); finish();}
			~req_cache_pa_valid: finish();
			else: {stall(); rsp_cache_miss(); allocate(req_cache_pa, icache_lru); icache_lru_array[pidx] := ~icache_lru;}
		}
	}
	proc allocate {
		state_name bus_req, bus_wait;
		reg allocate_bwoff[2] = 0;
		mem allocate_buf[4][64];
		reg allocate_paddr2refill[32];
		wire refill_paddr[32];
		wire refill_data[64];
		wire refill_way_sel;
		func_self refill(refill_paddr, refill_data, refill_way_sel);

		if(allocate_bwoff == 0) {
			allocate_paddr2refill := allocate_paddr;
		}
		state bus_req {
			req_read(allocate_paddr, 0xff);
			if(rsp_valid) {
				allocate_buf[allocate_bwoff] := rsp_data;
				allocate_paddr := allocate_paddr + 8;
				if(allocate_bwoff == 3) {
					refill(allocate_paddr2refill, {allocate_buf[3], allocate_buf[2], allocate_buf[1], allocate_buf[0]}, allocate_way_sel);
					allocate_bwoff := 0;
					finish();
				} else {
					allocate_bwoff++;
				}
			} else {
				allocate_paddr := allocate_paddr + 8;
				goto bus_wait;
			}
		}
		state bus_wait {
			if(rsp_valid) {
				allocate_buf[allocate_bwoff] := rsp_data;
				allocate_paddr := allocate_paddr + 8;
				if(allocate_bwoff == 3) {
					refill(allocate_paddr2refill, {allocate_buf[3], allocate_buf[2], allocate_buf[1], allocate_buf[0]}, allocate_way_sel);
					allocate_bwoff := 0;
					goto bus_req;
					finish();
				} else {
					goto bus_req;
					allocate_bwoff++;
				}
			}
		}
		/*
			if(!refill) is not work,
			refill data appears next cycle, so compare_tag reads old value
		*/
		stall();
	}
	func refill {
		wire refill_ptag[20];
		wire refill_pidx[7];
		wire refill_poff[5];
		.{refill_ptag, refill_pidx, refill_poff} = refill_paddr;
		any {
			refill_way_sel == 0: {
				icache_tag_array_way0[refill_pidx] := refill_ptag;
				icache_data_array_way0[refill_pidx] := refill_data;
				icache_valid_array_way0[refill_pidx] := 1;
			}
			refill_way_sel == 1: {
				icache_tag_array_way1[refill_pidx] := refill_ptag;
				icache_data_array_way1[refill_pidx] := refill_data;
				icache_valid_array_way1[refill_pidx] := 1;
			}
		}
		rsp_cache_hit(refill_data);
	}
}
