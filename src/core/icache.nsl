#include "icache.h"
#include "wishbone_master.h"

module icache {
	mem icache_data_array_way0[128][256];
	mem icache_data_array_way1[128][256];
	mem icache_tag_array_way0[128][20];
	mem icache_tag_array_way1[128][20];
	mem icache_valid_array_way0[128] = {0};
	mem icache_valid_array_way1[128] = {0};
	mem icache_lru_array[128] = {0};
	reg icache_hit_data[256];
	reg icache_hit_tag[20];
	reg icache_hit_valid;
	proc_name idle(icache_hit_data, icache_hit_tag, icache_hit_valid);
	reg icache_pa[32];
	reg icache_data_way0[256];
	reg icache_data_way1[256];
	reg icache_tag_way0[20];
	reg icache_tag_way1[20];
	reg icache_valid_way0;
	reg icache_valid_way1;
	reg icache_lru;
	reg icache_idx[12];
	proc_name compare_tag(icache_pa, icache_data_way0, icache_tag_way0, icache_valid_way0,
						  icache_data_way1, icache_tag_way1, icache_valid_way1,
						  icache_lru, icache_idx);
	reg allocate_paddr[32];
	reg allocate_way_sel;
	proc_name allocate(allocate_paddr, allocate_way_sel);

	func reset {
		idle(0, 0, 0);
	}

	proc idle {
		wire idle_tag[20];
		wire idle_idx[7];
		wire idle_woff[2];
		wire idle_boff[3];

		.{idle_tag, idle_idx, idle_woff, idle_boff} = req_cache_pa;
		if(req_cache_read) {
			any {
				icache_hit_tag == idle_tag && icache_hit_valid && idle_woff == 0: {rsp_cache_hit(icache_hit_data[63:0]);}
				icache_hit_tag == idle_tag && icache_hit_valid && idle_woff == 1: {rsp_cache_hit(icache_hit_data[127:64]);}
				icache_hit_tag == idle_tag && icache_hit_valid && idle_woff == 2: {rsp_cache_hit(icache_hit_data[191:128]);}
				icache_hit_tag == idle_tag && icache_hit_valid && idle_woff == 3: {rsp_cache_hit(icache_hit_data[255:192]);}
				else: {
					compare_tag(req_cache_pa,
						icache_data_array_way0[idle_idx], icache_tag_array_way0[idle_idx], icache_valid_array_way0[idle_idx],
						icache_data_array_way1[idle_idx], icache_tag_array_way1[idle_idx], icache_valid_array_way1[idle_idx],
						icache_lru_array[idle_idx], idle_idx);
				}
			}
		}
	}
	proc compare_tag {
		wire ptag[20], pidx[7], pwoff[2], pboff[3];

		.{ptag, pidx, pwoff, pboff} = icache_pa;

		any {
			icache_tag_way0 == ptag && icache_valid_way0 && pwoff == 0: {rsp_cache_hit(icache_data_way0[63:0]); idle(icache_data_way0, icache_tag_way0, icache_valid_way0);}
			icache_tag_way0 == ptag && icache_valid_way0 && pwoff == 1: {rsp_cache_hit(icache_data_way0[127:64]); idle(icache_data_way0, icache_tag_way0, icache_valid_way0);}
			icache_tag_way0 == ptag && icache_valid_way0 && pwoff == 2: {rsp_cache_hit(icache_data_way0[191:128]); idle(icache_data_way0, icache_tag_way0, icache_valid_way0);}
			icache_tag_way0 == ptag && icache_valid_way0 && pwoff == 3: {rsp_cache_hit(icache_data_way0[255:192]); idle(icache_data_way0, icache_tag_way0, icache_valid_way0);}
			icache_tag_way1 == ptag && icache_valid_way1 && pwoff == 0: {rsp_cache_hit(icache_data_way1[63:0]); idle(icache_data_way1, icache_tag_way1, icache_valid_way1);}
			icache_tag_way1 == ptag && icache_valid_way1 && pwoff == 1: {rsp_cache_hit(icache_data_way1[127:64]); idle(icache_data_way1, icache_tag_way1, icache_valid_way1);}
			icache_tag_way1 == ptag && icache_valid_way1 && pwoff == 2: {rsp_cache_hit(icache_data_way1[191:128]); idle(icache_data_way1, icache_tag_way1, icache_valid_way1);}
			icache_tag_way1 == ptag && icache_valid_way1 && pwoff == 3: {rsp_cache_hit(icache_data_way1[255:192]); idle(icache_data_way1, icache_tag_way1, icache_valid_way1);}
			else: {rsp_cache_miss(); allocate(icache_pa, icache_lru); icache_lru_array[pidx] := ~icache_lru;}
		}
	}
	proc allocate {
		state_name bus_req, bus_wait;
		reg allocate_bwoff[2] = 0;
		mem allocate_buf[4][64];
		reg allocate_paddr2refill[32];
		wire refill_paddr[32];
		wire refill_data[256];
		wire refill_way_sel;
		func_self refill(refill_paddr, refill_data, refill_way_sel);

		if(allocate_bwoff == 0) {
			allocate_paddr2refill := allocate_paddr;
		}
		state bus_req {
			req_read(allocate_paddr, 0xff);
			if(rsp_valid) {
				allocate_buf[allocate_bwoff] := rsp_data;
				allocate_paddr := allocate_paddr + 8;
				if(allocate_bwoff == 3) {
					refill(allocate_paddr2refill, {rsp_data, allocate_buf[2], allocate_buf[1], allocate_buf[0]}, allocate_way_sel);
					allocate_bwoff := 0;
					idle({rsp_data, allocate_buf[2], allocate_buf[1], allocate_buf[0]}, allocate_paddr[31:12], 1);
				} else {
					allocate_bwoff++;
				}
			} else {
				goto bus_wait;
			}
		}
		state bus_wait {
			if(rsp_valid) {
				allocate_buf[allocate_bwoff] := rsp_data;
				allocate_paddr := allocate_paddr + 8;
				if(allocate_bwoff == 3) {
					refill(allocate_paddr2refill, {rsp_data, allocate_buf[2], allocate_buf[1], allocate_buf[0]}, allocate_way_sel);
					allocate_bwoff := 0;
					goto bus_req;
					idle({rsp_data, allocate_buf[2], allocate_buf[1], allocate_buf[0]}, allocate_paddr[31:12], 1);
				} else {
					goto bus_req;
					allocate_bwoff++;
				}
			}
		}
	}
	func refill {
		wire refill_ptag[20];
		wire refill_pidx[7];
		wire refill_poff[5];
		.{refill_ptag, refill_pidx, refill_poff} = refill_paddr;
		any {
			refill_way_sel == 0: {
				icache_tag_array_way0[refill_pidx] := refill_ptag;
				icache_data_array_way0[refill_pidx] := refill_data;
				icache_valid_array_way0[refill_pidx] := 1;
			}
			refill_way_sel == 1: {
				icache_tag_array_way1[refill_pidx] := refill_ptag;
				icache_data_array_way1[refill_pidx] := refill_data;
				icache_valid_array_way1[refill_pidx] := 1;
			}
		}
		rsp_cache_hit(refill_data);
	}
}
