@startuml
box IFU
	participant IFU_S0
	participant IFU_S1
	participant IFU_S2
	participant ICACHE
	participant ITLB
	participant INST_BUF
end box
participant CPU
participant IMEM

group Flush
	INST_BUF -> INST_BUF: Flush
	IFU_S0 -> IFU_S0: Stall && Finish
	IFU_S1 -> IFU_S1: Stall && Finish
	IFU_S2 -> IFU_S2: Stall && Finish
	CPU -> IFU_S0: Set PC
end

group Invalidate
	INST_BUF -> INST_BUF: Flush
	IFU_S0 -> IFU_S0: Stall && Finish
	IFU_S1 -> IFU_S1: Stall && Finish
	IFU_S2 -> IFU_S2: Stall && Finish
	loop until invalidate done
		CPU -> ICACHE: Invalidate
	end
	ICACHE -> CPU: Invalidate done
	IFU_S0 -> IFU_S0: Replay
end

group Fetch
	alt not empty
	CPU -> INST_BUF: Dequeue
	else empty
		loop (buffer size) / 4
			alt SV32 enabled
				IFU_S0 -> ITLB: Translate
				alt tlb hit
					ITLB -> IFU_S1: Send physical PC
				else tlb miss
					ITLB -> IFU_S0: Stall
					ITLB -> PTW: Page table walk
					PTW -> ITLB: Page table entry
					ITLB -> ITLB: Refill
					ITLB -> IFU_S0: Replay
				end
			else SV32 disabled
				IFU_S0 -> IFU_S1: Send physical PC(VPC)
			end
			IFU_S1 -> ICACHE: Send physical PC
			ICACHE -> ICACHE: Access cache
			ICACHE -> ICACHE: Compare tag
			alt cache hit
				ICACHE -> IFU_S2: Return cache line
			else cache miss
				ICACHE -> IFU_S1: stall
				ICACHE -> ICACHE: Allocate
				group Refill
					loop (line size/8)/access width
						ICACHE -> IMEM: Read cache line
						...
						IMEM -> ICACHE: Read data
					end
					ICACHE -> ICACHE: Refill
				end
				ICACHE -> IFU_S1: Replay
			end	
			IFU_S2 -> IFU_S2: Pre-decode
			IFU_S2 -> INST_BUF: Enqueue
		end
	end
end
@enduml
