#include "turboV.h"
#include "wishbone_syscon.h"
#include "wishbone_common.h"
#include "wishbone_slave.h"
#include "rom64x2K.h"
#include "clint.h"

declare turboVSim simulation {
    func_in reset();

    output req_addr[32];
    output req_data[64];
    output req_sel[8];
    func_out req_read(req_addr, req_sel);
    func_out req_write(req_addr, req_sel, req_data);
    func_out req_read_modify_write(req_addr, req_sel, req_data);
    input rsp_data[64];
    func_in rsp_valid(rsp_data);
    func_in rsp_error();
    func_in rsp_retry();
    func_in rsp_stall();
#ifdef ENABLE_DEBUG
    output debug_commit_ptr0[REORDER_BUFFER_PTR_SIZE];
    output debug_commit_pc0[32];
    output debug_commit_inst0[32];
    output debug_commit_cause0[06];
    output debug_commit_rd_valid0;
    output debug_commit_dreg0[5];
    output debug_commit_preg0[6];
    output debug_commit_ppreg0[6];
    func_out debug_commit0(debug_commit_ptr0, debug_commit_pc0, debug_commit_inst0, debug_commit_cause0, debug_commit_rd_valid0, debug_commit_dreg0, debug_commit_preg0, debug_commit_ppreg0);
    output debug_commit_ptr1[REORDER_BUFFER_PTR_SIZE];
    output debug_commit_pc1[32];
    output debug_commit_inst1[32];
    output debug_commit_cause1[16];
    output debug_commit_rd_valid1;
    output debug_commit_dreg1[5];
    output debug_commit_preg1[6];
    output debug_commit_ppreg1[6];
    func_out debug_commit1(debug_commit_ptr1, debug_commit_pc1, debug_commit_inst1, debug_commit_cause1, debug_commit_rd_valid1, debug_commit_dreg1, debug_commit_preg1, debug_commit_ppreg1);

	output debug_rewind0_dreg[5];
	output debug_rewind0_preg[6];
	output debug_rewind0_ppreg[6];
	func_out debug_rewind0(debug_rewind0_dreg, debug_rewind0_preg, debug_rewind0_ppreg);
	output debug_rewind1_dreg[5];
	output debug_rewind1_preg[6];
	output debug_rewind1_ppreg[6];
	func_out debug_rewind1(debug_rewind1_dreg, debug_rewind1_preg, debug_rewind1_ppreg);
#endif
}
module turboVSim {
    turboV core;
	wishbone_syscon wb_syscon;
    wishbone_slave wb_slave_if;
	rom64x2K wb_rom;
    clint wb_clint;

    func reset {
        core.reset();
        wb_slave_if.reset();
        wb_rom.reset();
        wb_clint.reset();
    }
	wb_syscon.CLK_I = m_clock;
	wb_syscon.RST_I = p_reset;

    core.CLK_I = wb_syscon.CLK_O;
    core.RST_I = wb_syscon.RST_O;

    wb_slave_if.CLK_I = wb_syscon.CLK_O;
    wb_slave_if.RST_I = wb_syscon.RST_O;
    wb_slave_if.ADR_I = core.ADR_O;
    wb_slave_if.SEL_I = core.SEL_O;
    wb_slave_if.DAT_I = core.DAT_O;
    func core.CYC_O wb_slave_if.CYC_I();
    //func core.STB_O wb_slave_if.STB_I();
    func core.WE_O wb_slave_if.WE_I();
    func core.LOCK_O wb_slave_if.LOCK_I();
    func wb_slave_if.ACK_O {
        core.DAT_I = wb_slave_if.DAT_O;
        core.ACK_I();
    }
    func wb_slave_if.STALL_O core.STALL_I();
    func wb_slave_if.ERR_O core.ERR_I();
    func wb_slave_if.RTY_O core.RTY_I();

    wb_rom.CLK_I = wb_syscon.CLK_O;
    wb_rom.RST_I = wb_syscon.RST_O;
    wb_rom.ADR_I = core.ADR_O;
    wb_rom.SEL_I = core.SEL_O;
    wb_rom.DAT_I = core.DAT_O;
    func core.CYC_O wb_rom.CYC_I();
    //func core.STB_O wb_rom.STB_I();
    func core.WE_O wb_rom.WE_I();
    func core.LOCK_O wb_rom.LOCK_I();
    func wb_rom.ACK_O {
        core.DAT_I = wb_rom.DAT_O;
        core.ACK_I();
    }
    func wb_rom.STALL_O core.STALL_I();
    func wb_rom.ERR_O core.ERR_I();
    func wb_rom.RTY_O core.RTY_I();

    wb_clint.CLK_I = wb_syscon.CLK_O;
    wb_clint.RST_I = wb_syscon.RST_O;
    wb_clint.ADR_I = core.ADR_O;
    wb_clint.SEL_I = core.SEL_O;
    wb_clint.DAT_I = core.DAT_O;
    func core.CYC_O wb_clint.CYC_I();
    //func core.STB_O wb_clint.STB_I();
    func core.WE_O wb_clint.WE_I();
    func core.LOCK_O wb_clint.LOCK_I();
    func wb_clint.ACK_O {
        core.DAT_I = wb_clint.DAT_O;
        core.ACK_I();
    }
    func wb_clint.STALL_O core.STALL_I();
    func wb_clint.ERR_O core.ERR_I();
    func wb_clint.RTY_O core.RTY_I();

    func wb_clint.software_interrupt_hart0 {
        core.software_interrupt_req_hart0();
    }
    func wb_clint.timer_interrupt_hart0 {
        core.timer_interrupt_req_hart0();
    }

    any {
        core.ADR_O <= 0x0000_ffff: {
           if(core.STB_O) wb_rom.STB_I();
        }
        0x80000000 <= core.ADR_O && core.ADR_O <= 0x84000000: {
           if(core.STB_O) wb_slave_if.STB_I();
        }
        CLINT_BASE <= core.ADR_O && core.ADR_O <= CLINT_BASE+CLINT_LENGTH: {
           if(core.STB_O) wb_clint.STB_I();
        }
    }

    func wb_slave_if.req_read {
        req_read(wb_slave_if.req_addr, wb_slave_if.req_sel);
    }
    func wb_slave_if.req_write {
        req_write(wb_slave_if.req_addr, wb_slave_if.req_sel, wb_slave_if.req_data);
    }
    func wb_slave_if.req_read_modify_write {

    }
    func rsp_valid {
        wb_slave_if.rsp_valid(rsp_data);
    }
    func rsp_error {
        wb_slave_if.rsp_error();
    }
    func rsp_retry {
        wb_slave_if.rsp_retry();
    }
    func rsp_stall {
        wb_slave_if.rsp_stall();
    }
#ifdef ENABLE_DEBUG
    func core.debug_commit0 {
        debug_commit0(core.debug_commit_ptr0, core.debug_commit_pc0, core.debug_commit_inst0, core.debug_commit_cause0, core.debug_commit_rd_valid0, core.debug_commit_dreg0, core.debug_commit_preg0, core.debug_commit_ppreg0);
    }
    func core.debug_commit1 {
        debug_commit1(core.debug_commit_ptr1, core.debug_commit_pc1, core.debug_commit_inst1, core.debug_commit_cause1, core.debug_commit_rd_valid1, core.debug_commit_dreg1, core.debug_commit_preg1, core.debug_commit_ppreg1);
    }
	func core.debug_rewind0 {
		debug_rewind0(core.debug_rewind0_dreg, core.debug_rewind0_preg, core.debug_rewind0_ppreg);
	}
	func core.debug_rewind1 {
		debug_rewind1(core.debug_rewind1_dreg, core.debug_rewind1_preg, core.debug_rewind1_ppreg);
	}
#endif
}
